// Command handlers for chat interactions, media, and user utilities.

static void session_handle_reply(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(usage, sizeof(usage), "Usage: %s <message-id|r<reply-id>> <text>",
           session_command_alias_preferred_by_canonical(ctx, "/reply"));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *saveptr = NULL;
  char *target = strtok_r(working, " \t", &saveptr);
  if (target == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char *text = NULL;
  if (saveptr != NULL) {
    text = saveptr;
    while (*text == ' ' || *text == '\t') {
      ++text;
    }
  }

  if (text == NULL || *text == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  bool targeting_reply = false;
  if (*target == '#') {
    ++target;
  }
  if (*target == 'r' || *target == 'R') {
    targeting_reply = true;
    ++target;
  }

  if (*target == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *endptr = NULL;
  unsigned long long parsed = strtoull(target, &endptr, 10);
  if (parsed == 0ULL || (endptr != NULL && *endptr != '\0')) {
    session_send_system_line(ctx, usage);
    return;
  }

  uint64_t identifier = (uint64_t)parsed;

  chat_reply_entry_t parent_reply = {0};
  uint64_t parent_reply_id = 0U;
  uint64_t parent_message_id = 0U;

  if (targeting_reply) {
    if (!host_replies_find_entry_by_id(ctx->owner, identifier, &parent_reply)) {
      char message[SSH_CHATTER_MESSAGE_LIMIT];
      snprintf(message, sizeof(message), "Reply r#%" PRIu64 " was not found.", identifier);
      session_send_system_line(ctx, message);
      return;
    }
    parent_message_id = parent_reply.parent_message_id;
    parent_reply_id = parent_reply.reply_id;
  } else {
    chat_history_entry_t parent_entry = {0};
    if (host_history_find_entry_by_id(ctx->owner, identifier, &parent_entry)) {
      parent_message_id = parent_entry.message_id;
    } else if (host_replies_find_entry_by_id(ctx->owner, identifier, &parent_reply)) {
      parent_message_id = parent_reply.parent_message_id;
      parent_reply_id = parent_reply.reply_id;
    } else {
      char message[SSH_CHATTER_MESSAGE_LIMIT];
      snprintf(message, sizeof(message), "Message or reply #%" PRIu64 " was not found.", identifier);
      session_send_system_line(ctx, message);
      return;
    }
  }

  if (parent_message_id == 0U) {
    session_send_system_line(ctx, "Unable to determine reply target.");
    return;
  }

  char normalized[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(normalized, sizeof(normalized), "%s", text);
  session_normalize_newlines(normalized);
  trim_whitespace_inplace(normalized);
  for (size_t idx = 0U; normalized[idx] != '\0'; ++idx) {
    if (normalized[idx] == '\n') {
      normalized[idx] = ' ';
    }
  }
  trim_whitespace_inplace(normalized);

  if (normalized[0] == '\0') {
    session_send_system_line(ctx, "Reply text cannot be empty.");
    return;
  }

  chat_reply_entry_t entry = {0};
  entry.parent_message_id = parent_message_id;
  entry.parent_reply_id = parent_reply_id;
  entry.created_at = time(NULL);
  snprintf(entry.username, sizeof(entry.username), "%s", ctx->user.name);
  snprintf(entry.message, sizeof(entry.message), "%s", normalized);

  chat_reply_entry_t stored = {0};
  if (!host_replies_commit_entry(ctx->owner, &entry, &stored)) {
    session_send_system_line(ctx, "Unable to record reply.");
    return;
  }

  host_broadcast_reply(ctx->owner, &stored);
}

static void session_handle_image(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage = "Usage: /image <url> [caption]";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/image", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *saveptr = NULL;
  char *url = strtok_r(working, " \t", &saveptr);
  if (url == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char *caption = NULL;
  if (saveptr != NULL) {
    caption = saveptr;
    while (*caption == ' ' || *caption == '\t') {
      ++caption;
    }
    if (*caption == '\0') {
      caption = NULL;
    }
  }

  if (strnlen(url, SSH_CHATTER_ATTACHMENT_TARGET_LEN) >= SSH_CHATTER_ATTACHMENT_TARGET_LEN) {
    session_send_system_line(ctx, "Image URL is too long.");
    return;
  }

  chat_history_entry_t entry;
  chat_history_entry_prepare_user(&entry, ctx, "shared an image");
  entry.attachment_type = CHAT_ATTACHMENT_IMAGE;
  snprintf(entry.attachment_target, sizeof(entry.attachment_target), "%s", url);
  if (caption != NULL) {
    trim_whitespace_inplace(caption);
    snprintf(entry.attachment_caption, sizeof(entry.attachment_caption), "%s", caption);
  }

  chat_history_entry_t stored = {0};
  if (!host_history_commit_entry(ctx->owner, &entry, &stored)) {
    session_send_system_line(ctx, "Unable to record image message.");
    return;
  }

  session_send_history_entry(ctx, &stored);
  chat_room_broadcast_entry(&ctx->owner->room, &stored, ctx);
  host_notify_external_clients(ctx->owner, &stored);
}

static void session_handle_video(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage = "Usage: /video <url> [caption]";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/video", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *saveptr = NULL;
  char *url = strtok_r(working, " \t", &saveptr);
  if (url == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char *caption = NULL;
  if (saveptr != NULL) {
    caption = saveptr;
    while (*caption == ' ' || *caption == '\t') {
      ++caption;
    }
    if (*caption == '\0') {
      caption = NULL;
    }
  }

  if (strnlen(url, SSH_CHATTER_ATTACHMENT_TARGET_LEN) >= SSH_CHATTER_ATTACHMENT_TARGET_LEN) {
    session_send_system_line(ctx, "Video link is too long.");
    return;
  }

  chat_history_entry_t entry;
  chat_history_entry_prepare_user(&entry, ctx, "shared a video");
  entry.attachment_type = CHAT_ATTACHMENT_VIDEO;
  snprintf(entry.attachment_target, sizeof(entry.attachment_target), "%s", url);
  if (caption != NULL) {
    trim_whitespace_inplace(caption);
    snprintf(entry.attachment_caption, sizeof(entry.attachment_caption), "%s", caption);
  }

  chat_history_entry_t stored = {0};
  if (!host_history_commit_entry(ctx->owner, &entry, &stored)) {
    session_send_system_line(ctx, "Unable to record video message.");
    return;
  }

  session_send_history_entry(ctx, &stored);
  chat_room_broadcast_entry(&ctx->owner->room, &stored, ctx);
  host_notify_external_clients(ctx->owner, &stored);
}

static void session_handle_audio(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage = "Usage: /audio <url> [caption]";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/audio", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *saveptr = NULL;
  char *url = strtok_r(working, " \t", &saveptr);
  if (url == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char *caption = NULL;
  if (saveptr != NULL) {
    caption = saveptr;
    while (*caption == ' ' || *caption == '\t') {
      ++caption;
    }
    if (*caption == '\0') {
      caption = NULL;
    }
  }

  if (strnlen(url, SSH_CHATTER_ATTACHMENT_TARGET_LEN) >= SSH_CHATTER_ATTACHMENT_TARGET_LEN) {
    session_send_system_line(ctx, "Audio link is too long.");
    return;
  }

  chat_history_entry_t entry;
  chat_history_entry_prepare_user(&entry, ctx, "shared an audio clip");
  entry.attachment_type = CHAT_ATTACHMENT_AUDIO;
  snprintf(entry.attachment_target, sizeof(entry.attachment_target), "%s", url);
  if (caption != NULL) {
    trim_whitespace_inplace(caption);
    snprintf(entry.attachment_caption, sizeof(entry.attachment_caption), "%s", caption);
  }

  chat_history_entry_t stored = {0};
  if (!host_history_commit_entry(ctx->owner, &entry, &stored)) {
    session_send_system_line(ctx, "Unable to record audio message.");
    return;
  }

  session_send_history_entry(ctx, &stored);
  chat_room_broadcast_entry(&ctx->owner->room, &stored, ctx);
  host_notify_external_clients(ctx->owner, &stored);
}

static void session_handle_files(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage = "Usage: /files <url> [caption]";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/files", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *saveptr = NULL;
  char *url = strtok_r(working, " \t", &saveptr);
  if (url == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char *caption = NULL;
  if (saveptr != NULL) {
    caption = saveptr;
    while (*caption == ' ' || *caption == '\t') {
      ++caption;
    }
    if (*caption == '\0') {
      caption = NULL;
    }
  }

  if (strnlen(url, SSH_CHATTER_ATTACHMENT_TARGET_LEN) >= SSH_CHATTER_ATTACHMENT_TARGET_LEN) {
    session_send_system_line(ctx, "File link is too long.");
    return;
  }

  chat_history_entry_t entry;
  chat_history_entry_prepare_user(&entry, ctx, "shared a file");
  entry.attachment_type = CHAT_ATTACHMENT_FILE;
  snprintf(entry.attachment_target, sizeof(entry.attachment_target), "%s", url);
  if (caption != NULL) {
    trim_whitespace_inplace(caption);
    snprintf(entry.attachment_caption, sizeof(entry.attachment_caption), "%s", caption);
  }

  chat_history_entry_t stored = {0};
  if (!host_history_commit_entry(ctx->owner, &entry, &stored)) {
    session_send_system_line(ctx, "Unable to record file message.");
    return;
  }

  session_send_history_entry(ctx, &stored);
  chat_room_broadcast_entry(&ctx->owner->room, &stored, ctx);
  host_notify_external_clients(ctx->owner, &stored);
}

static void session_mail_render_inbox(session_ctx_t *ctx) {
  if (ctx == NULL) {
    return;
  }

  if (!session_user_data_load(ctx)) {
    session_send_system_line(ctx, "Mailbox storage is unavailable.");
    return;
  }

  if (ctx->user_data.mailbox_count == 0U) {
    session_send_system_line(ctx, "Your mailbox is empty.");
    return;
  }

  char header[128];
  snprintf(header, sizeof(header), "Mailbox (%u message%s):", (unsigned int)ctx->user_data.mailbox_count,
           ctx->user_data.mailbox_count == 1U ? "" : "s");
  session_send_system_line(ctx, header);

  for (size_t idx = 0U; idx < ctx->user_data.mailbox_count; ++idx) {
    const user_data_mail_entry_t *entry = &ctx->user_data.mailbox[idx];
    time_t stamp = (time_t)entry->timestamp;
    struct tm when;
    char stamp_text[32];
    if (stamp != 0 && localtime_r(&stamp, &when) != NULL) {
      if (strftime(stamp_text, sizeof(stamp_text), "%Y-%m-%d %H:%M", &when) == 0U) {
        snprintf(stamp_text, sizeof(stamp_text), "%s", "(time unknown)");
      }
    } else {
      snprintf(stamp_text, sizeof(stamp_text), "%s", "(time unknown)");
    }

    char body[USER_DATA_MAILBOX_MESSAGE_LEN];
    snprintf(body, sizeof(body), "%s", entry->message);
    for (size_t pos = 0U; body[pos] != '\0'; ++pos) {
      unsigned char ch = (unsigned char)body[pos];
      if (ch < ' ' && ch != '\n' && ch != '\t') {
        body[pos] = ' ';
      }
      if (body[pos] == '\n') {
        body[pos] = ' ';
      }
    }

    char line[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(line, sizeof(line), "[%s] %s: %s", stamp_text,
             entry->sender[0] != '\0' ? entry->sender : "(unknown)", body);
    session_send_system_line(ctx, line);
  }
}

static void session_handle_mail(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (!session_user_data_available(ctx) && !ctx->owner->user_data_ready) {
    session_send_system_line(ctx, "Mailbox storage is unavailable.");
    return;
  }

  const char *cursor = arguments != NULL ? arguments : "";
  char command[16];
  cursor = session_consume_token(cursor, command, sizeof(command));

  if (command[0] == '\0' || strcasecmp(command, "inbox") == 0) {
    session_mail_render_inbox(ctx);
    return;
  }

  if (strcasecmp(command, "send") == 0) {
    char target_token[SSH_CHATTER_USERNAME_LEN + SSH_CHATTER_IP_LEN];
    cursor = session_consume_token(cursor, target_token, sizeof(target_token));
    if (target_token[0] == '\0' || cursor == NULL || cursor[0] == '\0') {
      session_send_system_line(ctx, "Usage: /mail send <user[@ip]> <message>");
      return;
    }

    char target[SSH_CHATTER_USERNAME_LEN];
    char target_ip[SSH_CHATTER_IP_LEN];
    target_ip[0] = '\0';
    const char *at = strchr(target_token, '@');
    if (at != NULL) {
      size_t name_len = (size_t)(at - target_token);
      if (name_len == 0U || name_len >= sizeof(target)) {
        session_send_system_line(ctx, "Invalid mailbox recipient.");
        return;
      }
      memcpy(target, target_token, name_len);
      target[name_len] = '\0';
      const char *ip_part = at + 1;
      if (ip_part[0] != '\0') {
        if (strlen(ip_part) >= sizeof(target_ip)) {
          session_send_system_line(ctx, "Recipient IP is too long.");
          return;
        }
        snprintf(target_ip, sizeof(target_ip), "%s", ip_part);
      }
    } else {
      snprintf(target, sizeof(target), "%s", target_token);
    }

    if (target[0] == '\0') {
      session_send_system_line(ctx, "Invalid mailbox recipient.");
      return;
    }

    char message[USER_DATA_MAILBOX_MESSAGE_LEN];
    snprintf(message, sizeof(message), "%s", cursor);
    trim_whitespace_inplace(message);
    if (message[0] == '\0') {
      session_send_system_line(ctx, "Mailbox message cannot be empty.");
      return;
    }

    char error[128];
    if (!host_user_data_send_mail(ctx->owner, target, target_ip[0] != '\0' ? target_ip : NULL, ctx->user.name,
                                  message, error, sizeof(error))) {
      if (error[0] != '\0') {
        session_send_system_line(ctx, error);
      } else {
        session_send_system_line(ctx, "Unable to deliver mailbox message.");
      }
      return;
    }

    if (strcasecmp(target, ctx->user.name) == 0) {
      (void)session_user_data_load(ctx);
    }

    char confirmation[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(confirmation, sizeof(confirmation), "Delivered mailbox message to %s.", target);
    session_send_system_line(ctx, confirmation);
    return;
  }

  if (strcasecmp(command, "clear") == 0) {
    if (!session_user_data_load(ctx)) {
      session_send_system_line(ctx, "Mailbox storage is unavailable.");
      return;
    }

    ctx->user_data.mailbox_count = 0U;
    memset(ctx->user_data.mailbox, 0, sizeof(ctx->user_data.mailbox));
    if (session_user_data_commit(ctx)) {
      session_send_system_line(ctx, "Mailbox cleared.");
    } else {
      session_send_system_line(ctx, "Failed to update mailbox.");
    }
    return;
  }

  session_send_system_line(ctx, "Usage: /mail [inbox|send <user> <message>|clear]");
}

static void session_profile_picture_normalize(const char *input, char *output, size_t length) {
  if (output == NULL || length == 0U) {
    return;
  }

  output[0] = '\0';
  if (input == NULL) {
    return;
  }

  size_t out_idx = 0U;
  size_t idx = 0U;
  while (input[idx] != '\0') {
    size_t skip = host_column_reset_sequence_length(&input[idx]);
    if (skip > 0U) {
      idx += skip;
      continue;
    }

    unsigned char ch = (unsigned char)input[idx];
    ++idx;
    if (ch == '\r') {
      continue;
    }
    if (ch >= 32U || ch == '\n' || ch == '\t') {
      if (out_idx + 1U < length) {
        output[out_idx++] = (char)ch;
      }
    }
  }

  if (out_idx < length) {
    output[out_idx] = '\0';
  } else {
    output[length - 1U] = '\0';
  }
}

static void session_handle_profile_picture(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (!session_user_data_available(ctx) && !ctx->owner->user_data_ready) {
    session_send_system_line(ctx, "Profile storage is unavailable.");
    return;
  }

  const char *cursor = arguments != NULL ? arguments : "";
  char mode[16];
  cursor = session_consume_token(cursor, mode, sizeof(mode));

  if (mode[0] != '\0' && strcasecmp(mode, "ascii") != 0) {
    session_send_system_line(ctx, "Usage: /profilepic");
    return;
  }

  if (cursor != NULL && *cursor != '\0') {
    session_send_system_line(ctx, "Usage: /profilepic");
    return;
  }

  session_asciiart_begin(ctx, SESSION_ASCIIART_TARGET_PROFILE_PICTURE);
}

static void session_handle_reaction(session_ctx_t *ctx, size_t reaction_index, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL || reaction_index >= SSH_CHATTER_REACTION_KIND_COUNT) {
    return;
  }

  const reaction_descriptor_t *descriptor = &REACTION_DEFINITIONS[reaction_index];

  char usage[64];
  char canonical[32];
  int written = snprintf(canonical, sizeof(canonical), "/%s", descriptor->command);
  if (written < 0 || (size_t)written >= sizeof(canonical)) {
    canonical[0] = '\0';
  }
  const char *command_label = canonical[0] != '\0' ? session_command_alias_preferred_by_canonical(ctx, canonical) : NULL;
  if (command_label == NULL || command_label[0] == '\0') {
    command_label = canonical;
  }

  snprintf(usage, sizeof(usage), "Usage: %s <message-id>", command_label != NULL ? command_label : "");

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[64];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *endptr = NULL;
  unsigned long long parsed = strtoull(working, &endptr, 10);
  if (parsed == 0ULL || (endptr != NULL && *endptr != '\0')) {
    session_send_system_line(ctx, usage);
    return;
  }

  uint64_t message_id = (uint64_t)parsed;
  chat_history_entry_t updated = {0};
  if (!host_history_apply_reaction(ctx->owner, message_id, reaction_index, &updated)) {
    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "Message #%" PRIu64 " was not found or cannot be reacted to.", message_id);
    session_send_system_line(ctx, message);
    return;
  }

  char confirmation[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(confirmation, sizeof(confirmation), "Added %s %s to message #%" PRIu64 ".", descriptor->icon, descriptor->label,
           message_id);
  session_send_system_line(ctx, confirmation);
  chat_room_broadcast_reaction_update(ctx->owner, &updated);
  host_notify_external_clients(ctx->owner, &updated);
}

static void session_handle_usercount(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  size_t count = 0U;
  pthread_mutex_lock(&ctx->owner->room.lock);
  count = ctx->owner->room.member_count;
  pthread_mutex_unlock(&ctx->owner->room.lock);

  const bool eliza_active = atomic_load(&ctx->owner->eliza_enabled);
  size_t displayed = count;
  if (eliza_active) {
    if (SIZE_MAX - displayed > 0U) {
      ++displayed;
    }
  }

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  if (eliza_active && displayed > count) {
    snprintf(message, sizeof(message), "There %s currently %zu user%s connected (including eliza).",
             displayed == 1U ? "is" : "are", displayed, displayed == 1U ? "" : "s");
  } else {
    snprintf(message, sizeof(message), "There %s currently %zu user%s connected.",
             displayed == 1U ? "is" : "are", displayed, displayed == 1U ? "" : "s");
  }

  host_history_record_system(ctx->owner, message);
  chat_room_broadcast(&ctx->owner->room, message, NULL);
}

static void session_handle_today(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  time_t now = time(NULL);
  struct tm tm_now;
#if defined(_POSIX_THREAD_SAFE_FUNCTIONS)
  if (localtime_r(&now, &tm_now) == NULL) {
    session_send_system_line(ctx, "Unable to determine local time.");
    return;
  }
#else
  struct tm *tmp = localtime(&now);
  if (tmp == NULL) {
    session_send_system_line(ctx, "Unable to determine local time.");
    return;
  }
  tm_now = *tmp;
#endif

  int year = tm_now.tm_year + 1900;
  int yday = tm_now.tm_yday;

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  user_preference_t *pref = host_ensure_preference_locked(host, ctx->user.name);
  if (pref == NULL) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "Unable to track today's function right now.");
    return;
  }

  if (!host->random_seeded) {
    unsigned seed = (unsigned)(now ^ (time_t)getpid());
    srand(seed);
    host->random_seeded = true;
  }

  const char *chosen = NULL;
  bool already = false;
  if (pref->daily_year == year && pref->daily_yday == yday && pref->daily_function[0] != '\0') {
    chosen = pref->daily_function;
    already = true;
  } else {
    const size_t function_count = sizeof(DAILY_FUNCTIONS) / sizeof(DAILY_FUNCTIONS[0]);
    if (function_count == 0U) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "No functions available today.");
      return;
    }
    size_t index = (size_t)rand() % function_count;
    chosen = DAILY_FUNCTIONS[index];
    pref->daily_year = year;
    pref->daily_yday = yday;
    snprintf(pref->daily_function, sizeof(pref->daily_function), "%s", chosen);
  }

  ctx->daily_year = pref->daily_year;
  ctx->daily_yday = pref->daily_yday;
  snprintf(ctx->daily_function, sizeof(ctx->daily_function), "%s", chosen);

  host_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  if (already) {
    snprintf(message, sizeof(message), "You've already discovered today's function: %s", chosen);
  } else {
    snprintf(message, sizeof(message), "Today's function for you is: %s", chosen);
  }
  session_send_system_line(ctx, message);
}

static void session_handle_date(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage = "Usage: /date <Area/Location>";

  if (ctx == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/date", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char sanitized[PATH_MAX];
  if (!timezone_sanitize_identifier(working, sanitized, sizeof(sanitized))) {
    session_send_system_line(ctx, "Timezone names may only include letters, numbers, '/', '_', '-', '+', or '.'.");
    return;
  }

  char resolved[PATH_MAX];
  if (!timezone_resolve_identifier(sanitized, resolved, sizeof(resolved))) {
    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "Unknown timezone '%.128s'.", working);
    session_send_system_line(ctx, message);
    return;
  }

  const char *previous_tz = getenv("TZ");
  char previous_copy[PATH_MAX];
  bool had_previous = false;
  if (previous_tz != NULL) {
    int prev_written = snprintf(previous_copy, sizeof(previous_copy), "%s", previous_tz);
    if (prev_written >= 0 && (size_t)prev_written < sizeof(previous_copy)) {
      had_previous = true;
    }
  }

  bool tz_applied = false;

  if (setenv("TZ", resolved, 1) != 0) {
    session_send_system_line(ctx, "Unable to adjust timezone right now.");
    return;
  }

  tzset();
  tz_applied = true;

  time_t now = time(NULL);
  if (now == (time_t)-1) {
    session_send_system_line(ctx, "Unable to determine current time.");
    goto cleanup;
  }

  struct tm tm_now;
#if defined(_POSIX_THREAD_SAFE_FUNCTIONS)
  if (localtime_r(&now, &tm_now) == NULL) {
    session_send_system_line(ctx, "Unable to compute the requested local time.");
    goto cleanup;
  }
#else
  struct tm *tmp = localtime(&now);
  if (tmp == NULL) {
    session_send_system_line(ctx, "Unable to compute the requested local time.");
    goto cleanup;
  }
  tm_now = *tmp;
#endif

  char formatted[128];
  if (strftime(formatted, sizeof(formatted), "%Y-%m-%d %H:%M:%S %Z (UTC%z)", &tm_now) == 0) {
    session_send_system_line(ctx, "Unable to format the requested time.");
    goto cleanup;
  }

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(message, sizeof(message), "%.128s -> %s", resolved, formatted);
  session_send_system_line(ctx, message);

cleanup:
  if (tz_applied) {
    if (had_previous) {
      setenv("TZ", previous_copy, 1);
    } else {
      unsetenv("TZ");
    }
    tzset();
  }
}

static void session_handle_os(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage =
      "Usage: /os <windows|macos|linux|freebsd|ios|android|watchos|solaris|openbsd|netbsd|dragonflybsd|reactos|tyzen|kdos|pcdos|msdos|drdos|bsd|haiku|zealos|templeos>";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/os", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_OS_NAME_LEN];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);
  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  for (size_t idx = 0U; working[idx] != '\0'; ++idx) {
    working[idx] = (char)tolower((unsigned char)working[idx]);
  }

  const os_descriptor_t *descriptor = session_lookup_os_descriptor(working);
  if (descriptor == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  snprintf(ctx->os_name, sizeof(ctx->os_name), "%s", descriptor->name);
  host_store_user_os(ctx->owner, ctx);
  session_refresh_output_encoding(ctx);

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(message, sizeof(message), "Recorded your operating system as %s.", descriptor->display);
  session_send_system_line(ctx, message);
}

static void session_handle_getos(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage = "Usage: /getos <username>";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/getos", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char target[SSH_CHATTER_USERNAME_LEN];
  snprintf(target, sizeof(target), "%s", arguments);
  trim_whitespace_inplace(target);
  if (target[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char os_buffer[SSH_CHATTER_OS_NAME_LEN];
  if (!host_lookup_user_os(ctx->owner, target, os_buffer, sizeof(os_buffer))) {
    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "No operating system is recorded for %s.", target);
    session_send_system_line(ctx, message);
    return;
  }

  const os_descriptor_t *descriptor = session_lookup_os_descriptor(os_buffer);
  const char *display = descriptor != NULL ? descriptor->display : os_buffer;

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(message, sizeof(message), "%s reports using %s.", target, display);
  session_send_system_line(ctx, message);
}

static void session_handle_pair(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (ctx->os_name[0] == '\0') {
    session_send_system_line(ctx, "Set your operating system first with /os <name>.");
    return;
  }

  char matches[SSH_CHATTER_MESSAGE_LIMIT];
  matches[0] = '\0';
  size_t offset = 0U;
  size_t match_count = 0U;

  pthread_mutex_lock(&ctx->owner->room.lock);
  for (size_t idx = 0U; idx < ctx->owner->room.member_count; ++idx) {
    session_ctx_t *member = ctx->owner->room.members[idx];
    if (member == NULL || member == ctx) {
      continue;
    }
    if (member->os_name[0] == '\0') {
      continue;
    }
    if (strcasecmp(member->os_name, ctx->os_name) != 0) {
      continue;
    }

    size_t name_len = strnlen(member->user.name, sizeof(member->user.name));
    const size_t prefix = match_count == 0U ? 0U : 2U;
    if (offset + prefix + name_len >= sizeof(matches)) {
      break;
    }
    if (match_count > 0U) {
      matches[offset++] = ',';
      matches[offset++] = ' ';
    }
    memcpy(matches + offset, member->user.name, name_len);
    offset += name_len;
    matches[offset] = '\0';
    ++match_count;
  }
  pthread_mutex_unlock(&ctx->owner->room.lock);

  const os_descriptor_t *descriptor = session_lookup_os_descriptor(ctx->os_name);
  const char *display = descriptor != NULL ? descriptor->display : ctx->os_name;

  if (match_count == 0U) {
    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "No connected users currently share your %s setup.", display);
    session_send_system_line(ctx, message);
    return;
  }

  char header[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(header, sizeof(header), "Users sharing your %s setup:", display);
  session_send_system_line(ctx, header);
  session_send_system_line(ctx, matches);
}

static void session_handle_connected(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char buffer[SSH_CHATTER_MESSAGE_LIMIT];
  size_t offset = 0U;
  size_t count = 0U;

  pthread_mutex_lock(&ctx->owner->room.lock);
  for (size_t idx = 0U; idx < ctx->owner->room.member_count; ++idx) {
    session_ctx_t *member = ctx->owner->room.members[idx];
    if (member == NULL) {
      continue;
    }

    const size_t prefix = count == 0U ? 0U : 2U;
    size_t name_len = strnlen(member->user.name, sizeof(member->user.name));
    if (offset + prefix + name_len >= sizeof(buffer)) {
      break;
    }
    if (count > 0U) {
      buffer[offset++] = ',';
      buffer[offset++] = ' ';
    }
    memcpy(buffer + offset, member->user.name, name_len);
    offset += name_len;
    buffer[offset] = '\0';
    ++count;
  }
  pthread_mutex_unlock(&ctx->owner->room.lock);

  char header[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(header, sizeof(header), "Connected users (%zu):", count);
  session_send_system_line(ctx, header);
  if (count > 0U) {
    session_send_system_line(ctx, buffer);
  }
}

static void session_handle_alpha_centauri_landers(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  alpha_lander_entry_t entries[ALPHA_LANDERS_MAX_RECORDS];
  size_t entry_count = 0U;

  if (!host_alpha_landers_snapshot(ctx->owner, entries, ALPHA_LANDERS_MAX_RECORDS, &entry_count)) {
    session_send_system_line(ctx, "Unable to inspect landing records right now.");
    return;
  }

  session_send_system_line(ctx, "Alpha Centauri Landers — Immigrants' Flag Hall of Fame:");

  if (entry_count == 0U) {
    session_send_system_line(ctx, "No landings logged yet. Finish the expedition to claim the first flag!");
    return;
  }

  qsort(entries, entry_count, sizeof(entries[0]), alpha_lander_entry_compare);

  size_t display_count = entry_count < ALPHA_LANDERS_DISPLAY_LIMIT ? entry_count : ALPHA_LANDERS_DISPLAY_LIMIT;
  for (size_t idx = 0U; idx < display_count; ++idx) {
    const alpha_lander_entry_t *lander = &entries[idx];
    char when[64];
    when[0] = '\0';
    if (lander->last_flag_timestamp != 0U) {
      time_t when_time = (time_t)lander->last_flag_timestamp;
      struct tm tm_buf;
      if (gmtime_r(&when_time, &tm_buf) != NULL) {
        strftime(when, sizeof(when), "%Y-%m-%d %H:%M UTC", &tm_buf);
      }
    }
    if (when[0] == '\0') {
      snprintf(when, sizeof(when), "unknown");
    }

    char line[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(line, sizeof(line), "#%zu %s — flags planted: %u (last landing %s)", idx + 1U, lander->username,
             lander->flag_count, when);
    session_send_system_line(ctx, line);
  }

  if (entry_count > display_count) {
    size_t remaining = entry_count - display_count;
    char summary[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(summary, sizeof(summary), "…and %zu more landers recorded in the archives.", remaining);
    session_send_system_line(ctx, summary);
  }
}

static bool session_parse_birthday(const char *input, char *normalized, size_t length) {
  if (input == NULL || normalized == NULL || length < 11U) {
    return false;
  }

  char working[32];
  snprintf(working, sizeof(working), "%s", input);
  trim_whitespace_inplace(working);

  if (strlen(working) != 10U || working[4] != '-' || working[7] != '-') {
    return false;
  }

  for (size_t idx = 0U; idx < 10U; ++idx) {
    if (idx == 4U || idx == 7U) {
      continue;
    }
    if (!isdigit((unsigned char)working[idx])) {
      return false;
    }
  }

  int year = atoi(working);
  int month = atoi(working + 5);
  int day = atoi(working + 8);

  if (year < 1900 || year > 9999 || month < 1 || month > 12 || day < 1) {
    return false;
  }

  static const int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  int max_day = days_in_month[month - 1];
  bool leap = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
  if (month == 2 && leap) {
    max_day = 29;
  }
  if (day > max_day) {
    return false;
  }

  char formatted[16];
  int written = snprintf(formatted, sizeof(formatted), "%04d-%02d-%02d", year, month, day);
  if (written <= 0 || written >= (int)sizeof(formatted)) {
    return false;
  }
  if ((size_t)(written + 1) > length) {
    return false;
  }
  snprintf(normalized, length, "%s", formatted);
  return true;
}

static void session_handle_birthday(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (arguments == NULL) {
    session_send_system_line(ctx, "Usage: /birthday YYYY-MM-DD");
    return;
  }

  char normalized[16];
  if (!session_parse_birthday(arguments, normalized, sizeof(normalized))) {
    session_send_system_line(ctx, "Invalid date. Use /birthday YYYY-MM-DD.");
    return;
  }

  ctx->has_birthday = true;
  snprintf(ctx->birthday, sizeof(ctx->birthday), "%s", normalized);
  host_store_birthday(ctx->owner, ctx, normalized);

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(message, sizeof(message), "Birthday recorded as %s.", normalized);
  session_send_system_line(ctx, message);
}

static void session_handle_soulmate(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (!ctx->has_birthday) {
    session_send_system_line(ctx, "Set your birthday first with /birthday YYYY-MM-DD.");
    return;
  }

  char matches[SSH_CHATTER_MESSAGE_LIMIT];
  matches[0] = '\0';
  size_t count = 0U;

  pthread_mutex_lock(&ctx->owner->lock);
  for (size_t idx = 0U; idx < SSH_CHATTER_MAX_PREFERENCES; ++idx) {
    const user_preference_t *pref = &ctx->owner->preferences[idx];
    if (!pref->in_use || !pref->has_birthday) {
      continue;
    }
    if (strncmp(pref->birthday, ctx->birthday, sizeof(pref->birthday)) != 0) {
      continue;
    }
    if (strncmp(pref->username, ctx->user.name, SSH_CHATTER_USERNAME_LEN) == 0) {
      continue;
    }
    size_t current_len = strnlen(matches, sizeof(matches));
    size_t name_len = strnlen(pref->username, sizeof(pref->username));
    size_t prefix_len = count == 0U ? 0U : 2U;
    if (current_len + prefix_len + name_len >= sizeof(matches)) {
      continue;
    }
    if (count > 0U) {
      matches[current_len++] = ',';
      matches[current_len++] = ' ';
    }
    memcpy(matches + current_len, pref->username, name_len);
    matches[current_len + name_len] = '\0';
    ++count;
  }
  pthread_mutex_unlock(&ctx->owner->lock);

  if (count == 0U) {
    session_send_system_line(ctx, "No birthday matches found right now.");
    return;
  }

  session_send_system_line(ctx, "Birthday soulmates:");
  session_send_system_line(ctx, matches);
}

static void session_handle_grant(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (!ctx->user.is_lan_operator) {
    session_send_system_line(ctx, "Only LAN operators may grant operator privileges.");
    return;
  }

  if (arguments == NULL) {
    session_send_system_line(ctx, "Usage: /grant <ip-address>");
    return;
  }

  char ip[SSH_CHATTER_IP_LEN];
  snprintf(ip, sizeof(ip), "%s", arguments);
  trim_whitespace_inplace(ip);
  if (ip[0] == '\0') {
    session_send_system_line(ctx, "Usage: /grant <ip-address>");
    return;
  }

  unsigned char buf[sizeof(struct in6_addr)];
  if (inet_pton(AF_INET, ip, buf) != 1 && inet_pton(AF_INET6, ip, buf) != 1) {
    session_send_system_line(ctx, "Provide a valid IPv4 or IPv6 address.");
    return;
  }

  bool already_granted = false;
  bool added = false;
  pthread_mutex_lock(&ctx->owner->lock);
  already_granted = host_ip_has_grant_locked(ctx->owner, ip);
  if (!already_granted) {
    added = host_add_operator_grant_locked(ctx->owner, ip);
    if (added) {
      host_state_save_locked(ctx->owner);
    }
  } else {
    added = true;
  }
  pthread_mutex_unlock(&ctx->owner->lock);

  if (!added) {
    session_send_system_line(ctx, "Cannot store more grants right now.");
    return;
  }

  if (already_granted) {
    session_send_system_line(ctx, "That IP already has operator privileges.");
  } else {
    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "Operator privileges will be applied to %s.", ip);
    session_send_system_line(ctx, message);
  }
  host_apply_grant_to_ip(ctx->owner, ip);
}

static void session_handle_revoke(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (!ctx->user.is_lan_operator) {
    session_send_system_line(ctx, "Only LAN administrators may revoke operator privileges.");
    return;
  }

  if (arguments == NULL) {
    session_send_system_line(ctx, "Usage: /revoke <ip-address>");
    return;
  }

  char ip[SSH_CHATTER_IP_LEN];
  snprintf(ip, sizeof(ip), "%s", arguments);
  trim_whitespace_inplace(ip);
  if (ip[0] == '\0') {
    session_send_system_line(ctx, "Usage: /revoke <ip-address>");
    return;
  }

  unsigned char buf[sizeof(struct in6_addr)];
  if (inet_pton(AF_INET, ip, buf) != 1 && inet_pton(AF_INET6, ip, buf) != 1) {
    session_send_system_line(ctx, "Provide a valid IPv4 or IPv6 address.");
    return;
  }

  bool removed = false;
  pthread_mutex_lock(&ctx->owner->lock);
  removed = host_remove_operator_grant_locked(ctx->owner, ip);
  if (removed) {
    host_state_save_locked(ctx->owner);
  }
  pthread_mutex_unlock(&ctx->owner->lock);

  if (!removed) {
    session_send_system_line(ctx, "No stored grant exists for that IP address.");
    return;
  }

  host_revoke_grant_from_ip(ctx->owner, ip);

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(message, sizeof(message), "Operator privileges revoked for %s.", ip);
  session_send_system_line(ctx, message);
}

static void session_handle_delete_message(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (!ctx->user.is_operator && !ctx->user.is_lan_operator) {
    session_send_system_line(ctx, "Only operators may delete messages.");
    return;
  }

  static const char *kUsage = "Usage: /delete-msg <id|start-end>";

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/delete-msg", kUsage, usage, sizeof(usage));
  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);
  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  uint64_t start_id = 0U;
  uint64_t end_id = 0U;
  char *dash = strchr(working, '-');
  if (dash != NULL) {
    *dash = '\0';
    char *end_token = dash + 1;
    trim_whitespace_inplace(working);
    trim_whitespace_inplace(end_token);
    if (working[0] == '\0' || end_token[0] == '\0') {
      session_send_system_line(ctx, usage);
      return;
    }

    char *endptr = NULL;
    errno = 0;
    unsigned long long start_value = strtoull(working, &endptr, 10);
    if (errno != 0 || endptr == NULL || *endptr != '\0' || start_value == 0ULL) {
      session_send_system_line(ctx, usage);
      return;
    }

    errno = 0;
    unsigned long long end_value = strtoull(end_token, &endptr, 10);
    if (errno != 0 || endptr == NULL || *endptr != '\0' || end_value == 0ULL) {
      session_send_system_line(ctx, usage);
      return;
    }

    start_id = (uint64_t)start_value;
    end_id = (uint64_t)end_value;
    if (start_id > end_id) {
      session_send_system_line(ctx, "Start identifier must be less than or equal to the end identifier.");
      return;
    }
  } else {
    char *endptr = NULL;
    errno = 0;
    unsigned long long value = strtoull(working, &endptr, 10);
    if (errno != 0 || endptr == NULL || *endptr != '\0' || value == 0ULL) {
      session_send_system_line(ctx, usage);
      return;
    }
    start_id = (uint64_t)value;
    end_id = start_id;
  }

  uint64_t first_removed = 0U;
  uint64_t last_removed = 0U;
  size_t replies_removed = 0U;
  size_t removed = host_history_delete_range(ctx->owner, start_id, end_id, &first_removed, &last_removed, &replies_removed);
  if (removed == 0U) {
    session_send_system_line(ctx, "No chat messages matched that identifier.");
    return;
  }

  char range_label[64];
  if (last_removed != 0U && last_removed != first_removed) {
    snprintf(range_label, sizeof(range_label), "#%" PRIu64 "-#%" PRIu64, first_removed, last_removed);
  } else {
    snprintf(range_label, sizeof(range_label), "#%" PRIu64, first_removed);
  }

  char reply_note[64];
  if (replies_removed > 0U) {
    snprintf(reply_note, sizeof(reply_note), " (%zu repl%s removed)", replies_removed, replies_removed == 1U ? "y" : "ies");
  } else {
    reply_note[0] = '\0';
  }

  char acknowledgement[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(acknowledgement, sizeof(acknowledgement), "Removed %zu message%s (%s)%s.", removed,
           removed == 1U ? "" : "s", range_label, reply_note);
  session_send_system_line(ctx, acknowledgement);

  char notice[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(notice, sizeof(notice), "* [%s] removed %s %s%s.", ctx->user.name, removed == 1U ? "message" : "messages",
           range_label, reply_note);
  host_history_record_system(ctx->owner, notice);
  chat_room_broadcast(&ctx->owner->room, notice, NULL);
}

static void session_handle_poll(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage =
      "Usage: /poll <question>|<option1>|<option2>[|option3][|option4][|option5] or /poll to view current poll";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/poll", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_poll_summary(ctx);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);
  if (working[0] == '\0') {
    session_send_poll_summary(ctx);
    return;
  }

  if (!ctx->user.is_operator && !ctx->user.is_lan_operator) {
    session_send_system_line(ctx, "Only operators may modify the main poll.");
    return;
  }

  char *tokens[1 + 5];
  size_t token_count = 0U;
  char *cursor = working;
  while (cursor != NULL && token_count < sizeof(tokens) / sizeof(tokens[0])) {
    char *next = strchr(cursor, '|');
    if (next != NULL) {
      *next = '\0';
    }
    trim_whitespace_inplace(cursor);
    tokens[token_count++] = cursor;
    cursor = next != NULL ? next + 1 : NULL;
  }

  if (token_count < 3U) {
    session_send_system_line(ctx, usage);
    return;
  }

  size_t option_count = token_count - 1U;
  if (option_count > 5U) {
    option_count = 5U;
  }

  for (size_t idx = 1U; idx <= option_count; ++idx) {
    if (tokens[idx][0] == '\0') {
      session_send_system_line(ctx, "Poll options cannot be empty.");
      return;
    }
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  if (host->poll.id == UINT64_MAX) {
    host->poll.id = 0U;
  }
  host->poll.id += 1U;
  host->poll.active = true;
  host->poll.option_count = option_count;
  host->poll.allow_multiple = false;
  snprintf(host->poll.question, sizeof(host->poll.question), "%s", tokens[0]);
  for (size_t idx = 0U; idx < option_count; ++idx) {
    snprintf(host->poll.options[idx].text, sizeof(host->poll.options[idx].text), "%s", tokens[idx + 1U]);
    host->poll.options[idx].votes = 0U;
  }
  for (size_t idx = option_count; idx < sizeof(host->poll.options) / sizeof(host->poll.options[0]); ++idx) {
    host->poll.options[idx].text[0] = '\0';
    host->poll.options[idx].votes = 0U;
  }
  host_vote_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  char announce[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(announce, sizeof(announce), "* [%s] started poll #%" PRIu64 ": %s", ctx->user.name, host->poll.id, tokens[0]);
  chat_room_broadcast(&host->room, announce, NULL);

  for (size_t idx = 0U; idx < option_count; ++idx) {
    char option_line[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(option_line, sizeof(option_line), "  /%zu - %s", idx + 1U, tokens[idx + 1U]);
    chat_room_broadcast(&host->room, option_line, NULL);
  }

  session_send_system_line(ctx, "Poll created successfully.");
  session_send_poll_summary(ctx);
}

static void session_handle_vote(session_ctx_t *ctx, size_t option_index) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  if (!host->poll.active || option_index >= host->poll.option_count) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "There is no active poll for that choice.");
    return;
  }

  user_preference_t *pref = host_ensure_preference_locked(host, ctx->user.name);
  if (pref == NULL) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "Unable to record your vote right now.");
    return;
  }

  if (pref->last_poll_id == host->poll.id && pref->last_poll_choice == (int)option_index) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "You have already voted for that option.");
    return;
  }

  if (pref->last_poll_id == host->poll.id && pref->last_poll_choice >= 0 &&
      (size_t)pref->last_poll_choice < host->poll.option_count) {
    if (host->poll.options[pref->last_poll_choice].votes > 0U) {
      host->poll.options[pref->last_poll_choice].votes -= 1U;
    }
  }

  host->poll.options[option_index].votes += 1U;
  pref->last_poll_id = host->poll.id;
  pref->last_poll_choice = (int)option_index;
  host_vote_state_save_locked(host);
  host_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(message, sizeof(message), "Vote recorded for option /%zu.", option_index + 1U);
  session_send_system_line(ctx, message);
  session_send_poll_summary(ctx);
}

// Record a vote in a named poll, ensuring a user can move their vote between options.
static void session_handle_named_vote(session_ctx_t *ctx, size_t option_index, const char *label) {
  if (ctx == NULL || ctx->owner == NULL || label == NULL || label[0] == '\0') {
    return;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  named_poll_state_t *poll = host_find_named_poll_locked(host, label);
  if (poll == NULL || !poll->poll.active || option_index >= poll->poll.option_count) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "There is no active poll with that label.");
    return;
  }

  const bool allow_multiple = poll->poll.allow_multiple;
  const uint32_t option_bit = (option_index < 32U) ? (1U << option_index) : 0U;

  size_t voter_slot = SIZE_MAX;
  for (size_t idx = 0U; idx < poll->voter_count; ++idx) {
    if (poll->voters[idx].username[0] == '\0') {
      continue;
    }
    if (strcasecmp(poll->voters[idx].username, ctx->user.name) == 0) {
      voter_slot = idx;
      break;
    }
  }

  if (voter_slot == SIZE_MAX) {
    if (poll->voter_count >= SSH_CHATTER_MAX_NAMED_VOTERS) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "Vote tracking is full for this poll right now.");
      return;
    }
    voter_slot = poll->voter_count++;
    snprintf(poll->voters[voter_slot].username, sizeof(poll->voters[voter_slot].username), "%s", ctx->user.name);
    poll->voters[voter_slot].choice = -1;
    poll->voters[voter_slot].choices_mask = 0U;
  }

  uint32_t *mask = &poll->voters[voter_slot].choices_mask;
  if (allow_multiple) {
    if (option_bit != 0U && (*mask & option_bit) != 0U) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "You have already voted for that option.");
      return;
    }
  } else {
    if (poll->voters[voter_slot].choice == (int)option_index) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "You have already voted for that option.");
      return;
    }
    if (poll->voters[voter_slot].choice >= 0) {
      int previous = poll->voters[voter_slot].choice;
      if (previous >= 0 && (size_t)previous < poll->poll.option_count && poll->poll.options[previous].votes > 0U) {
        poll->poll.options[previous].votes -= 1U;
      }
    }
  }

  poll->poll.options[option_index].votes += 1U;
  if (allow_multiple) {
    if (option_bit != 0U) {
      *mask |= option_bit;
    }
    poll->voters[voter_slot].choice = -1;
  } else {
    poll->voters[voter_slot].choice = (int)option_index;
    poll->voters[voter_slot].choices_mask = (option_bit != 0U) ? option_bit : 0U;
  }

  char resolved_label[SSH_CHATTER_POLL_LABEL_LEN];
  snprintf(resolved_label, sizeof(resolved_label), "%s", poll->label);
  host_vote_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  char message[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(message, sizeof(message), "Vote recorded for /%zu %s.", option_index + 1U, resolved_label);
  session_send_system_line(ctx, message);
  session_send_poll_summary_generic(ctx, &poll->poll, resolved_label);
}

// Allow voting in a named poll by specifying the label and desired choice directly.
static void session_handle_elect_command(session_ctx_t *ctx, const char *arguments) {
  static const char *kUsage = "Usage: /elect <label> <choice>";
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/elect", kUsage, usage, sizeof(usage));

  if (arguments == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);
  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *label = working;
  char *choice = working;
  while (*choice != '\0' && !isspace((unsigned char)*choice)) {
    ++choice;
  }
  if (*choice != '\0') {
    *choice++ = '\0';
  }
  while (*choice == ' ' || *choice == '\t') {
    ++choice;
  }

  if (label[0] == '\0' || *choice == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  trim_whitespace_inplace(choice);

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  named_poll_state_t *poll = host_find_named_poll_locked(host, label);
  if (poll == NULL || !poll->poll.active) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "There is no active poll with that label.");
    return;
  }

  char canonical_label[SSH_CHATTER_POLL_LABEL_LEN];
  snprintf(canonical_label, sizeof(canonical_label), "%s", poll->label);

  size_t option_index = SIZE_MAX;
  const size_t option_count = poll->poll.option_count;

  const char *numeric_start = choice;
  if (*numeric_start == '/') {
    ++numeric_start;
  }
  if (*numeric_start != '\0') {
    char *endptr = NULL;
    unsigned long parsed = strtoul(numeric_start, &endptr, 10);
    if (endptr != NULL && endptr != numeric_start && *endptr == '\0' && parsed >= 1UL && parsed <= option_count) {
      option_index = (size_t)(parsed - 1UL);
    }
  }

  if (option_index == SIZE_MAX) {
    for (size_t idx = 0U; idx < option_count; ++idx) {
      if (poll->poll.options[idx].text[0] == '\0') {
        continue;
      }
      if (strcasecmp(poll->poll.options[idx].text, choice) == 0) {
        option_index = idx;
        break;
      }
    }
  }

  pthread_mutex_unlock(&host->lock);

  if (option_index == SIZE_MAX) {
    session_send_system_line(ctx, "That choice is not available in this poll.");
    return;
  }

  session_handle_named_vote(ctx, option_index, canonical_label);
}

// Parse the /vote command to manage named polls, including listing, creation, and closure.
static void session_handle_vote_command(session_ctx_t *ctx, const char *arguments, bool allow_multiple) {
  const char *usage_template = allow_multiple
                                   ? "Usage: /vote <label> <question>|<option1>|<option2>[|option3][|option4][|option5]"
                                   : "Usage: /vote-single <label> <question>|<option1>|<option2>[|option3][|option4][|option5]";
  const char *canonical = allow_multiple ? "/vote" : "/vote-single";
  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, canonical, usage_template, usage, sizeof(usage));
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (arguments == NULL) {
    session_list_named_polls(ctx);
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);
  if (working[0] == '\0') {
    session_list_named_polls(ctx);
    return;
  }

  const char *close_command = NULL;
  if (strncmp(working, "@close", 6) == 0 && (working[6] == '\0' || isspace((unsigned char)working[6]))) {
    close_command = "@close";
  } else if (strncmp(working, "@종료", 7) == 0 && (working[7] == '\0' || isspace((unsigned char)working[7]))) {
    close_command = "@종료";
  }

  if (close_command != NULL) {
    const char *label_start = working + strlen(close_command);
    while (*label_start != '\0' && isspace((unsigned char)*label_start)) {
      ++label_start;
    }
    if (*label_start == '\0') {
      session_send_system_line(ctx, "Usage: /vote @close <label>");
      return;
    }

    char label[SSH_CHATTER_POLL_LABEL_LEN];
    size_t close_len = 0U;
    while (label_start[close_len] != '\0' && !isspace((unsigned char)label_start[close_len])) {
      if (close_len + 1U >= sizeof(label)) {
        session_send_system_line(ctx, "Poll label is too long.");
        return;
      }
      label[close_len] = label_start[close_len];
      ++close_len;
    }
    label[close_len] = '\0';
    if (!poll_label_is_valid(label)) {
      session_send_system_line(ctx, "Poll labels may contain only letters, numbers, hyphens, or underscores.");
      return;
    }

    host_t *host = ctx->owner;
    pthread_mutex_lock(&host->lock);
    named_poll_state_t *poll = host_find_named_poll_locked(host, label);
    if (poll == NULL || !poll->poll.active) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "That poll is not currently active.");
      return;
    }

    bool has_privilege = ctx->user.is_operator || ctx->user.is_lan_operator ||
                         (poll->owner[0] != '\0' && strcasecmp(poll->owner, ctx->user.name) == 0);
    if (!has_privilege) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "Only the poll owner or an operator may close this poll.");
      return;
    }

    poll_state_reset(&poll->poll);
    poll->voter_count = 0U;
    host_recount_named_polls_locked(host);
    host_vote_state_save_locked(host);
    pthread_mutex_unlock(&host->lock);

    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "* [%s] closed poll [%s].", ctx->user.name, label);
    chat_room_broadcast(&host->room, message, NULL);
    session_send_system_line(ctx, "Poll closed.");
    return;
  }

  char label[SSH_CHATTER_POLL_LABEL_LEN];
  size_t label_len = 0U;
  const char *cursor = working;
  while (*cursor != '\0' && !isspace((unsigned char)*cursor)) {
    if (label_len + 1U >= sizeof(label)) {
      session_send_system_line(ctx, "Poll label is too long.");
      return;
    }
    label[label_len++] = *cursor++;
  }
  label[label_len] = '\0';
  if (!poll_label_is_valid(label)) {
    session_send_system_line(ctx, "Poll labels may contain only letters, numbers, hyphens, or underscores.");
    return;
  }

  while (*cursor != '\0' && isspace((unsigned char)*cursor)) {
    ++cursor;
  }

  if (*cursor == '\0') {
    host_t *host = ctx->owner;
    pthread_mutex_lock(&host->lock);
    named_poll_state_t *poll = host_find_named_poll_locked(host, label);
    named_poll_state_t snapshot = {0};
    if (poll != NULL) {
      snapshot = *poll;
    }
    pthread_mutex_unlock(&host->lock);

    if (poll == NULL) {
      session_send_system_line(ctx, "No poll exists with that label.");
      return;
    }

    session_send_poll_summary_generic(ctx, &snapshot.poll, snapshot.label);
    return;
  }

  char definition[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(definition, sizeof(definition), "%s", cursor);
  trim_whitespace_inplace(definition);
  if (definition[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *tokens[1 + 5];
  size_t token_count = 0U;
  char *token_cursor = definition;
  while (token_cursor != NULL && token_count < sizeof(tokens) / sizeof(tokens[0])) {
    char *next = strchr(token_cursor, '|');
    if (next != NULL) {
      *next = '\0';
    }
    trim_whitespace_inplace(token_cursor);
    tokens[token_count++] = token_cursor;
    token_cursor = next != NULL ? next + 1 : NULL;
  }

  if (token_count < 3U) {
    session_send_system_line(ctx, "Provide at least a question and two options.");
    return;
  }

  size_t option_count = token_count - 1U;
  if (option_count > 5U) {
    option_count = 5U;
  }

  for (size_t idx = 1U; idx <= option_count; ++idx) {
    if (tokens[idx][0] == '\0') {
      session_send_system_line(ctx, "Poll options cannot be empty.");
      return;
    }
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  named_poll_state_t *poll = host_ensure_named_poll_locked(host, label);
  if (poll == NULL) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "Too many named polls are already registered.");
    return;
  }

  if (poll->poll.active && poll->owner[0] != '\0' && strcasecmp(poll->owner, ctx->user.name) != 0 &&
      !ctx->user.is_operator && !ctx->user.is_lan_operator) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "Only the poll owner or an operator may restart this poll.");
    return;
  }

  if (poll->poll.id == UINT64_MAX) {
    poll->poll.id = 0U;
  }
  poll->poll.id += 1U;
  poll->poll.active = true;
  poll->poll.option_count = option_count;
  poll->poll.allow_multiple = allow_multiple;
  snprintf(poll->poll.question, sizeof(poll->poll.question), "%s", tokens[0]);
  for (size_t idx = 0U; idx < option_count; ++idx) {
    snprintf(poll->poll.options[idx].text, sizeof(poll->poll.options[idx].text), "%s", tokens[idx + 1U]);
    poll->poll.options[idx].votes = 0U;
  }
  for (size_t idx = option_count; idx < sizeof(poll->poll.options) / sizeof(poll->poll.options[0]); ++idx) {
    poll->poll.options[idx].text[0] = '\0';
    poll->poll.options[idx].votes = 0U;
  }
  snprintf(poll->owner, sizeof(poll->owner), "%s", ctx->user.name);
  poll->voter_count = 0U;
  for (size_t idx = 0U; idx < SSH_CHATTER_MAX_NAMED_VOTERS; ++idx) {
    poll->voters[idx].username[0] = '\0';
    poll->voters[idx].choice = -1;
    poll->voters[idx].choices_mask = 0U;
  }
  host_recount_named_polls_locked(host);
  named_poll_state_t snapshot = *poll;
  host_vote_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  char announce[SSH_CHATTER_MESSAGE_LIMIT];
  int question_preview = (int)strnlen(snapshot.poll.question, sizeof(snapshot.poll.question));
  if (question_preview > 120) {
    question_preview = 120;
  }
  snprintf(announce, sizeof(announce), "* [%s] started poll [%s] #%" PRIu64 ": %.*s", ctx->user.name, label, snapshot.poll.id,
           question_preview, snapshot.poll.question);
  chat_room_broadcast(&host->room, announce, NULL);

  for (size_t idx = 0U; idx < snapshot.poll.option_count; ++idx) {
    char option_line[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(option_line, sizeof(option_line), "  /%zu %s - %s", idx + 1U, label, snapshot.poll.options[idx].text);
    chat_room_broadcast(&host->room, option_line, NULL);
  }

  session_send_system_line(ctx, "Named poll created successfully.");
  session_send_poll_summary_generic(ctx, &snapshot.poll, snapshot.label);
}

// Format a timestamp for BBS displays in a compact form.
static void bbs_format_time(time_t value, char *buffer, size_t length) {
  if (buffer == NULL || length == 0U) {
    return;
  }
  struct tm tm_value;
  if (localtime_r(&value, &tm_value) == NULL) {
    snprintf(buffer, length, "-");
    return;
  }
  strftime(buffer, length, "%Y-%m-%d %H:%M", &tm_value);
}

// Return a post by identifier while the host lock is held.
static bbs_post_t *host_find_bbs_post_locked(host_t *host, uint64_t id) {
  if (host == NULL || id == 0U) {
    return NULL;
  }
  for (size_t idx = 0U; idx < SSH_CHATTER_BBS_MAX_POSTS; ++idx) {
    if (!host->bbs_posts[idx].in_use) {
      continue;
    }
    if (host->bbs_posts[idx].id == id) {
      return &host->bbs_posts[idx];
    }
  }
  return NULL;
}

// Allocate a new post slot, returning NULL if capacity has been reached.
static bbs_post_t *host_allocate_bbs_post_locked(host_t *host) {
  if (host == NULL) {
    return NULL;
  }
  for (size_t idx = 0U; idx < SSH_CHATTER_BBS_MAX_POSTS; ++idx) {
    if (host->bbs_posts[idx].in_use) {
      continue;
    }
    bbs_post_t *post = &host->bbs_posts[idx];
    post->in_use = true;
    post->id = host->next_bbs_id++;
    post->tag_count = 0U;
    post->comment_count = 0U;
    post->created_at = time(NULL);
    post->bumped_at = post->created_at;
    post->title[0] = '\0';
    post->body[0] = '\0';
    post->author[0] = '\0';
    for (size_t tag = 0U; tag < SSH_CHATTER_BBS_MAX_TAGS; ++tag) {
      post->tags[tag][0] = '\0';
    }
    for (size_t comment = 0U; comment < SSH_CHATTER_BBS_MAX_COMMENTS; ++comment) {
      post->comments[comment].author[0] = '\0';
      post->comments[comment].text[0] = '\0';
      post->comments[comment].created_at = 0;
    }
    if (host->bbs_post_count < SSH_CHATTER_BBS_MAX_POSTS) {
      host->bbs_post_count += 1U;
    }
    return post;
  }
  return NULL;
}

static void host_reset_bbs_post(bbs_post_t *post) {
  if (post == NULL) {
    return;
  }

  post->in_use = false;
  post->id = 0U;
  post->author[0] = '\0';
  post->title[0] = '\0';
  post->body[0] = '\0';
  post->tag_count = 0U;
  post->created_at = 0;
  post->bumped_at = 0;
  post->comment_count = 0U;
  for (size_t tag = 0U; tag < SSH_CHATTER_BBS_MAX_TAGS; ++tag) {
    post->tags[tag][0] = '\0';
  }
  for (size_t comment = 0U; comment < SSH_CHATTER_BBS_MAX_COMMENTS; ++comment) {
    post->comments[comment].author[0] = '\0';
    post->comments[comment].text[0] = '\0';
    post->comments[comment].created_at = 0;
  }
}

static void host_clear_bbs_post_locked(host_t *host, bbs_post_t *post) {
  if (host == NULL || post == NULL) {
    return;
  }

  host_reset_bbs_post(post);

  size_t write_index = 0U;
  for (size_t idx = 0U; idx < SSH_CHATTER_BBS_MAX_POSTS; ++idx) {
    if (!host->bbs_posts[idx].in_use) {
      continue;
    }

    if (write_index != idx) {
      host->bbs_posts[write_index] = host->bbs_posts[idx];
    }

    ++write_index;
  }

  for (size_t idx = write_index; idx < SSH_CHATTER_BBS_MAX_POSTS; ++idx) {
    host_reset_bbs_post(&host->bbs_posts[idx]);
  }

  host->bbs_post_count = write_index;
}

static void session_bbs_queue_translation(session_ctx_t *ctx, const bbs_post_t *post) {
  if (ctx == NULL || post == NULL || !post->in_use) {
    return;
  }

  if (!ctx->translation_enabled || !ctx->output_translation_enabled ||
      ctx->output_translation_language[0] == '\0') {
    return;
  }

  char payload[SSH_CHATTER_TRANSLATION_WORKING_LEN];
  size_t offset = 0U;

  offset = session_append_fragment(payload, sizeof(payload), offset, "Title: ");
  offset = session_append_fragment(payload, sizeof(payload), offset, post->title);
  offset = session_append_fragment(payload, sizeof(payload), offset, "\nAuthor: ");
  offset = session_append_fragment(payload, sizeof(payload), offset, post->author);

  char created_buffer[32];
  char bumped_buffer[32];
  bbs_format_time(post->created_at, created_buffer, sizeof(created_buffer));
  bbs_format_time(post->bumped_at, bumped_buffer, sizeof(bumped_buffer));
  offset = session_append_fragment(payload, sizeof(payload), offset, "\nCreated: ");
  offset = session_append_fragment(payload, sizeof(payload), offset, created_buffer);
  offset = session_append_fragment(payload, sizeof(payload), offset, " (bumped ");
  offset = session_append_fragment(payload, sizeof(payload), offset, bumped_buffer);
  offset = session_append_fragment(payload, sizeof(payload), offset, ")\n");

  if (post->tag_count > 0U) {
    offset = session_append_fragment(payload, sizeof(payload), offset, "Tags: ");
    for (size_t idx = 0U; idx < post->tag_count; ++idx) {
      if (idx > 0U) {
        offset = session_append_fragment(payload, sizeof(payload), offset, ",");
      }
      offset = session_append_fragment(payload, sizeof(payload), offset, post->tags[idx]);
    }
  } else {
    offset = session_append_fragment(payload, sizeof(payload), offset, "Tags: (none)");
  }

  offset = session_append_fragment(payload, sizeof(payload), offset, "\nBody:\n");
  if (post->body[0] != '\0') {
    offset = session_append_fragment(payload, sizeof(payload), offset, post->body);
  } else {
    offset = session_append_fragment(payload, sizeof(payload), offset, "(empty)");
  }

  if (post->comment_count > 0U) {
    offset = session_append_fragment(payload, sizeof(payload), offset, "\nComments:\n");
    for (size_t idx = 0U; idx < post->comment_count; ++idx) {
      const bbs_comment_t *comment = &post->comments[idx];
      offset = session_append_fragment(payload, sizeof(payload), offset, comment->author);
      offset = session_append_fragment(payload, sizeof(payload), offset, ": ");
      offset = session_append_fragment(payload, sizeof(payload), offset, comment->text);
      offset = session_append_fragment(payload, sizeof(payload), offset, "\n");
    }
  } else {
    offset = session_append_fragment(payload, sizeof(payload), offset, "\nComments: none");
  }

  payload[offset < sizeof(payload) ? offset : sizeof(payload) - 1U] = '\0';

  if (payload[0] == '\0') {
    return;
  }

  if (session_translation_queue_caption(ctx, payload, 0U)) {
    session_translation_flush_ready(ctx);
  }
}

// Render an ASCII framed view of a post, including metadata and comments.
static void session_bbs_emit_line_if_visible(session_ctx_t *ctx, const char *line, bool column_reset,
                                             size_t offset, size_t window, bool emit, size_t *line_index) {
  if (line_index == NULL) {
    return;
  }

  const char *text = (line != NULL) ? line : "";
  (void)column_reset;

  if (!emit) {
    ++(*line_index);
    return;
  }

  size_t start = offset;
  size_t end = (window == 0U || offset > SIZE_MAX - window) ? SIZE_MAX : offset + window;
  if (*line_index >= start && *line_index < end) {
    if (host_contains_column_reset(text)) {
      char sanitized[SSH_CHATTER_MESSAGE_LIMIT];
      sanitized[0] = '\0';
      snprintf(sanitized, sizeof(sanitized), "%s", text);
      host_strip_column_reset(sanitized);
      session_send_system_line(ctx, sanitized);
    } else {
      session_send_system_line(ctx, text);
    }
  }

  ++(*line_index);
}

static size_t session_bbs_render_post_iterate(session_ctx_t *ctx, const bbs_post_t *post, const char *notice,
                                              size_t offset, size_t window, bool emit) {
  size_t line_index = 0U;

  char header_label[64];
  snprintf(header_label, sizeof(header_label), "BBS Post #%" PRIu64, post->id);
  char separator_line[SSH_CHATTER_MESSAGE_LIMIT];
  session_format_separator_line(ctx, header_label, separator_line, sizeof(separator_line));
  session_bbs_emit_line_if_visible(ctx, separator_line, false, offset, window, emit, &line_index);

  if (notice != NULL && notice[0] != '\0') {
    session_bbs_emit_line_if_visible(ctx, notice, false, offset, window, emit, &line_index);
    session_bbs_emit_line_if_visible(ctx, "", false, offset, window, emit, &line_index);
  }

  char created_buffer[32];
  char bumped_buffer[32];
  bbs_format_time(post->created_at, created_buffer, sizeof(created_buffer));
  bbs_format_time(post->bumped_at, bumped_buffer, sizeof(bumped_buffer));

  char metadata[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(metadata, sizeof(metadata), "Title : %s", post->title);
  session_bbs_emit_line_if_visible(ctx, metadata, false, offset, window, emit, &line_index);
  snprintf(metadata, sizeof(metadata), "Author: %s", post->author);
  session_bbs_emit_line_if_visible(ctx, metadata, false, offset, window, emit, &line_index);
  snprintf(metadata, sizeof(metadata), "Created: %s (bumped %s)", created_buffer, bumped_buffer);
  session_bbs_emit_line_if_visible(ctx, metadata, false, offset, window, emit, &line_index);

  if (post->tag_count > 0U) {
    char tag_line[SSH_CHATTER_MESSAGE_LIMIT];
    int header_written = snprintf(tag_line, sizeof(tag_line), "Tags  : ");
    size_t tag_offset = header_written > 0 ? (size_t)header_written : 0U;
    if (tag_offset >= sizeof(tag_line)) {
      tag_offset = sizeof(tag_line) - 1U;
    }
    for (size_t idx = 0U; idx < post->tag_count; ++idx) {
      size_t tag_len = strlen(post->tags[idx]);
      if (tag_offset + tag_len + 2U >= sizeof(tag_line)) {
        break;
      }
      if (idx > 0U) {
        tag_line[tag_offset++] = ',';
      }
      memcpy(tag_line + tag_offset, post->tags[idx], tag_len);
      tag_offset += tag_len;
      tag_line[tag_offset] = '\0';
    }
    session_bbs_emit_line_if_visible(ctx, tag_line, false, offset, window, emit, &line_index);
  } else {
    session_bbs_emit_line_if_visible(ctx, "Tags  : (none)", false, offset, window, emit, &line_index);
  }

  if (ctx != NULL && ctx->owner != NULL) {
    user_data_record_t author_record;
    if (host_user_data_find_profile_picture(ctx->owner, post->author, &author_record)) {
      session_format_separator_line(ctx, "Profile Picture", separator_line, sizeof(separator_line));
      session_bbs_emit_line_if_visible(ctx, separator_line, false, offset, window, emit, &line_index);

      const char *picture_cursor = author_record.profile_picture;
      while (picture_cursor != NULL && *picture_cursor != '\0') {
        const char *newline = strchr(picture_cursor, '\n');
        if (newline == NULL) {
          session_bbs_emit_line_if_visible(ctx, picture_cursor, true, offset, window, emit, &line_index);
          break;
        }

        size_t len = (size_t)(newline - picture_cursor);
        if (len >= SSH_CHATTER_MESSAGE_LIMIT) {
          len = SSH_CHATTER_MESSAGE_LIMIT - 1U;
        }

        char line[SSH_CHATTER_MESSAGE_LIMIT];
        memcpy(line, picture_cursor, len);
        line[len] = '\0';
        session_bbs_emit_line_if_visible(ctx, line, true, offset, window, emit, &line_index);
        picture_cursor = newline + 1;
      }

      session_bbs_emit_line_if_visible(ctx, "", false, offset, window, emit, &line_index);
    }
  }

  session_format_separator_line(ctx, "Body", separator_line, sizeof(separator_line));
  session_bbs_emit_line_if_visible(ctx, separator_line, false, offset, window, emit, &line_index);

  if (post->body[0] != '\0') {
    const char *body_cursor = post->body;
    while (body_cursor != NULL && *body_cursor != '\0') {
      const char *newline = strchr(body_cursor, '\n');
      if (newline == NULL) {
        session_bbs_emit_line_if_visible(ctx, body_cursor, true, offset, window, emit, &line_index);
        break;
      }
      size_t len = (size_t)(newline - body_cursor);
      if (len >= SSH_CHATTER_MESSAGE_LIMIT) {
        len = SSH_CHATTER_MESSAGE_LIMIT - 1U;
      }
      char line[SSH_CHATTER_MESSAGE_LIMIT];
      memcpy(line, body_cursor, len);
      line[len] = '\0';
      session_bbs_emit_line_if_visible(ctx, line, true, offset, window, emit, &line_index);
      body_cursor = newline + 1;
    }
  } else {
    session_bbs_emit_line_if_visible(ctx, "(empty)", false, offset, window, emit, &line_index);
  }

  session_format_separator_line(ctx, "Comments", separator_line, sizeof(separator_line));
  session_bbs_emit_line_if_visible(ctx, separator_line, false, offset, window, emit, &line_index);

  if (post->comment_count == 0U) {
    session_bbs_emit_line_if_visible(ctx, "No comments yet.", false, offset, window, emit, &line_index);
  } else {
    for (size_t idx = 0U; idx < post->comment_count; ++idx) {
      const bbs_comment_t *comment = &post->comments[idx];
      char comment_time[32];
      bbs_format_time(comment->created_at, comment_time, sizeof(comment_time));
      char line[SSH_CHATTER_MESSAGE_LIMIT];
      snprintf(line, sizeof(line), "[%zu] %s (%s)", idx + 1U, comment->author, comment_time);
      session_bbs_emit_line_if_visible(ctx, line, false, offset, window, emit, &line_index);
      session_bbs_emit_line_if_visible(ctx, comment->text, true, offset, window, emit, &line_index);
    }
  }

  const bool translation_active = ctx->translation_enabled && ctx->output_translation_enabled &&
                                  ctx->output_translation_language[0] != '\0';
  if (translation_active && post->comment_count > 0U) {
    session_bbs_emit_line_if_visible(ctx, "", false, offset, window, emit, &line_index);
  }

  session_bbs_emit_line_if_visible(ctx, "", false, offset, window, emit, &line_index);
  session_format_separator_line(ctx, "Write a comment", separator_line, sizeof(separator_line));
  session_bbs_emit_line_if_visible(ctx, separator_line, false, offset, window, emit, &line_index);

  char reply_instruction[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(reply_instruction, sizeof(reply_instruction),
           "Reply with /bbs comment %" PRIu64 "|<message> (or /bbs exit to leave this view).", post->id);
  session_bbs_emit_line_if_visible(ctx, reply_instruction, false, offset, window, emit, &line_index);
  bool can_edit = (strncmp(post->author, ctx->user.name, SSH_CHATTER_USERNAME_LEN) == 0) || ctx->user.is_operator ||
                  ctx->user.is_lan_operator;
  if (can_edit) {
    char edit_instruction[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(edit_instruction, sizeof(edit_instruction), "Edit this post with /bbs edit %" PRIu64 ".", post->id);
    session_bbs_emit_line_if_visible(ctx, edit_instruction, false, offset, window, emit, &line_index);
  }
  session_bbs_emit_line_if_visible(ctx, "Need a new thread? Use /bbs post <title>[|tags...] instead.", false, offset,
                                   window, emit, &line_index);
  session_bbs_emit_line_if_visible(ctx, "Use Up/Down arrows or PgUp/PgDn to scroll this post.", false, offset, window,
                                   emit, &line_index);

  return line_index;
}

static void session_bbs_render_post(session_ctx_t *ctx, const bbs_post_t *post, const char *notice,
                                    bool reset_scroll, bool scroll_to_bottom) {
  if (ctx == NULL || post == NULL || !post->in_use) {
    return;
  }

  bool previous_override = session_translation_push_scope_override(ctx);

  bool same_post = ctx->bbs_view_active && ctx->bbs_view_post_id == post->id;
  if (!same_post || reset_scroll) {
    ctx->bbs_view_scroll_offset = 0U;
  }

  ctx->bbs_view_active = true;
  ctx->bbs_view_post_id = post->id;

  if (notice != NULL && notice[0] != '\0') {
    snprintf(ctx->bbs_view_notice, sizeof(ctx->bbs_view_notice), "%s", notice);
    ctx->bbs_view_notice_pending = true;
  }

  const char *active_notice = ctx->bbs_view_notice_pending ? ctx->bbs_view_notice : NULL;

  size_t window = SSH_CHATTER_BBS_VIEW_WINDOW;
  if (window == 0U) {
    window = 1U;
  }

  size_t total_lines = session_bbs_render_post_iterate(ctx, post, active_notice, 0U, window, false);
  if (total_lines == 0U) {
    total_lines = 1U;
  }
  ctx->bbs_view_total_lines = total_lines;

  size_t max_offset = (total_lines > window) ? (total_lines - window) : 0U;
  size_t desired_offset = ctx->bbs_view_scroll_offset;
  if (scroll_to_bottom) {
    desired_offset = max_offset;
  }
  if (desired_offset > max_offset) {
    desired_offset = max_offset;
  }
  ctx->bbs_view_scroll_offset = desired_offset;

  session_bbs_prepare_canvas(ctx);
  session_bbs_render_post_iterate(ctx, post, active_notice, desired_offset, window, true);
  ctx->bbs_view_notice_pending = false;

  session_bbs_queue_translation(ctx, post);
  session_translation_pop_scope_override(ctx, previous_override);
}

static bool session_bbs_refresh_view(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL || !ctx->bbs_view_active || ctx->bbs_view_post_id == 0U) {
    return false;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  bbs_post_t *post = host_find_bbs_post_locked(host, ctx->bbs_view_post_id);
  bbs_post_t snapshot = {0};
  if (post != NULL) {
    snapshot = *post;
  }
  pthread_mutex_unlock(&host->lock);

  if (post == NULL || !snapshot.in_use) {
    ctx->bbs_view_active = false;
    ctx->bbs_view_post_id = 0U;
    ctx->bbs_view_total_lines = 0U;
    ctx->bbs_view_scroll_offset = 0U;
    session_send_system_line(ctx, "That post is no longer available.");
    return false;
  }

  session_bbs_render_post(ctx, &snapshot, NULL, false, false);
  return true;
}

static bool session_bbs_scroll(session_ctx_t *ctx, int direction, size_t step) {
  if (ctx == NULL || ctx->owner == NULL || !ctx->bbs_view_active || direction == 0) {
    return false;
  }

  size_t window = SSH_CHATTER_BBS_VIEW_WINDOW;
  if (window == 0U) {
    window = 1U;
  }

  size_t total = ctx->bbs_view_total_lines;
  if (total <= window) {
    if (direction > 0) {
      session_send_system_line(ctx, "Already viewing the top of this post.");
    } else if (direction < 0) {
      session_send_system_line(ctx, "Already viewing the end of this post.");
    }
    return true;
  }

  size_t max_offset = total - window;
  size_t offset = ctx->bbs_view_scroll_offset;
  size_t effective_step = step;
  if (effective_step == 0U) {
    effective_step = window;
  }
  if (effective_step == 0U) {
    effective_step = 1U;
  }

  size_t new_offset = offset;
  if (direction > 0) {
    if (offset == 0U) {
      session_send_system_line(ctx, "Already viewing the top of this post.");
      return true;
    }
    if (effective_step > offset) {
      effective_step = offset;
    }
    if (effective_step == 0U) {
      effective_step = 1U;
    }
    new_offset = offset - effective_step;
  } else if (direction < 0) {
    if (offset >= max_offset) {
      session_send_system_line(ctx, "Already viewing the end of this post.");
      return true;
    }
    size_t advance = effective_step;
    if (advance > max_offset - offset) {
      advance = max_offset - offset;
    }
    if (advance == 0U) {
      advance = 1U;
    }
    new_offset = offset + advance;
  }

  if (new_offset == offset) {
    if (direction > 0) {
      session_send_system_line(ctx, "Already viewing the top of this post.");
    } else if (direction < 0) {
      session_send_system_line(ctx, "Already viewing the end of this post.");
    }
    return true;
  }

  ctx->bbs_view_scroll_offset = new_offset;
  return session_bbs_refresh_view(ctx);
}

// Show the BBS dashboard and mark the session as being in BBS mode.
static void session_bbs_show_dashboard(session_ctx_t *ctx) {
  if (ctx == NULL) {
    return;
  }
  ctx->in_bbs_mode = true;
  ctx->bbs_view_active = false;
  ctx->bbs_view_post_id = 0U;
  session_bbs_prepare_canvas(ctx);
  session_render_separator(ctx, "BBS Dashboard");
  session_send_system_line(ctx,
                           "Commands: list, read <id>, topic read <tag>, post <title> [tags...], comment <id>|<text>, regen <id>, delete <id>, exit");
  session_bbs_list(ctx);
}

// List posts sorted by most recent activity.
static void session_bbs_list(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  bool previous_override = session_translation_push_scope_override(ctx);
  typedef struct bbs_listing {
    uint64_t id;
    char title[SSH_CHATTER_BBS_TITLE_LEN];
    char author[SSH_CHATTER_USERNAME_LEN];
    char tags[SSH_CHATTER_BBS_MAX_TAGS][SSH_CHATTER_BBS_TAG_LEN];
    size_t tag_count;
    time_t created_at;
    time_t bumped_at;
  } bbs_listing_t;

  bbs_listing_t listings[SSH_CHATTER_BBS_MAX_POSTS];
  size_t count = 0U;

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  for (size_t idx = 0U; idx < SSH_CHATTER_BBS_MAX_POSTS; ++idx) {
    const bbs_post_t *post = &host->bbs_posts[idx];
    if (!post->in_use) {
      continue;
    }
    listings[count].id = post->id;
    snprintf(listings[count].title, sizeof(listings[count].title), "%s", post->title);
    snprintf(listings[count].author, sizeof(listings[count].author), "%s", post->author);
    listings[count].tag_count = post->tag_count;
    for (size_t tag = 0U; tag < post->tag_count && tag < SSH_CHATTER_BBS_MAX_TAGS; ++tag) {
      snprintf(listings[count].tags[tag], sizeof(listings[count].tags[tag]), "%s", post->tags[tag]);
    }
    listings[count].created_at = post->created_at;
    listings[count].bumped_at = post->bumped_at;
    ++count;
    if (count >= SSH_CHATTER_BBS_MAX_POSTS) {
      break;
    }
  }
  pthread_mutex_unlock(&host->lock);

  if (count == 0U) {
    char empty_hint[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(empty_hint, sizeof(empty_hint),
             "The bulletin board is empty. Use /bbs post <title> [tags...] to write something. Finish drafts with %s.",
             session_bbs_terminator(ctx));
    session_send_system_line(ctx, empty_hint);
    session_translation_pop_scope_override(ctx, previous_override);
    return;
  }

  for (size_t outer = 1U; outer < count; ++outer) {
    bbs_listing_t key = listings[outer];
    size_t position = outer;
    while (position > 0U && listings[position - 1U].bumped_at < key.bumped_at) {
      listings[position] = listings[position - 1U];
      --position;
    }
    listings[position] = key;
  }

  ctx->bbs_view_active = false;
  ctx->bbs_view_post_id = 0U;

  typedef struct bbs_topic_group {
    char name[SSH_CHATTER_BBS_TAG_LEN];
    size_t indexes[SSH_CHATTER_BBS_MAX_POSTS];
    size_t count;
  } bbs_topic_group_t;

  bbs_topic_group_t topics[SSH_CHATTER_BBS_MAX_POSTS];
  size_t topic_count = 0U;
  memset(topics, 0, sizeof(topics));

  for (size_t idx = 0U; idx < count; ++idx) {
    const char *topic_name = (listings[idx].tag_count > 0U) ? listings[idx].tags[0] : SSH_CHATTER_BBS_DEFAULT_TAG;
    size_t match = topic_count;
    for (size_t topic_idx = 0U; topic_idx < topic_count; ++topic_idx) {
      if (strcasecmp(topics[topic_idx].name, topic_name) == 0) {
        match = topic_idx;
        break;
      }
    }
    if (match == topic_count) {
      if (topic_count >= SSH_CHATTER_BBS_MAX_POSTS) {
        continue;
      }
      snprintf(topics[match].name, sizeof(topics[match].name), "%s", topic_name);
      topics[match].count = 0U;
      ++topic_count;
    }
    if (topics[match].count < SSH_CHATTER_BBS_MAX_POSTS) {
      topics[match].indexes[topics[match].count++] = idx;
    }
  }

  for (size_t outer = 1U; outer < topic_count; ++outer) {
    bbs_topic_group_t key = topics[outer];
    size_t position = outer;
    while (position > 0U && strcasecmp(topics[position - 1U].name, key.name) > 0) {
      topics[position] = topics[position - 1U];
      --position;
    }
    topics[position] = key;
  }

  session_render_separator(ctx, "BBS Posts by Topic");
  for (size_t topic_idx = 0U; topic_idx < topic_count; ++topic_idx) {
    char section_label[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(section_label, sizeof(section_label), "Topic: %s", topics[topic_idx].name);
    session_render_separator(ctx, section_label);

    for (size_t entry_idx = 0U; entry_idx < topics[topic_idx].count; ++entry_idx) {
      size_t listing_index = topics[topic_idx].indexes[entry_idx];
      const bbs_listing_t *entry = &listings[listing_index];
      char created_buffer[32];
      bbs_format_time(entry->bumped_at, created_buffer, sizeof(created_buffer));
      char line[SSH_CHATTER_MESSAGE_LIMIT];
      int title_preview = (int)strnlen(entry->title, sizeof(entry->title));
      if (title_preview > 80) {
        title_preview = 80;
      }
      if (entry->tag_count == 0U) {
        snprintf(line, sizeof(line), "#%" PRIu64 " [%s] %.*s|(no tags)", entry->id, created_buffer, title_preview,
                 entry->title);
      } else {
        char tag_buffer[SSH_CHATTER_MESSAGE_LIMIT];
        size_t buffer_offset = 0U;
        tag_buffer[0] = '\0';
        for (size_t tag = 0U; tag < entry->tag_count; ++tag) {
          size_t len = strlen(entry->tags[tag]);
          if (buffer_offset + len + 2U >= sizeof(tag_buffer)) {
            break;
          }
          if (tag > 0U) {
            tag_buffer[buffer_offset++] = ',';
          }
          memcpy(tag_buffer + buffer_offset, entry->tags[tag], len);
          buffer_offset += len;
          tag_buffer[buffer_offset] = '\0';
        }
        int tags_preview = (int)strnlen(tag_buffer, sizeof(tag_buffer));
        if (tags_preview > 80) {
          tags_preview = 80;
        }
        snprintf(line, sizeof(line), "#%" PRIu64 " [%s] %.*s|%.*s", entry->id, created_buffer, title_preview,
                 entry->title, tags_preview, tag_buffer);
      }
      session_send_system_line(ctx, line);
    }
  }

  session_render_separator(ctx, "End");
  session_translation_pop_scope_override(ctx, previous_override);
}

static void session_bbs_list_topic(session_ctx_t *ctx, const char *topic) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  char working_topic[SSH_CHATTER_BBS_TAG_LEN];
  if (topic != NULL) {
    snprintf(working_topic, sizeof(working_topic), "%s", topic);
  } else {
    working_topic[0] = '\0';
  }
  trim_whitespace_inplace(working_topic);

  if (working_topic[0] == '\0') {
    session_send_system_line(ctx, "Specify a topic to read.");
    return;
  }

  bool previous_override = session_translation_push_scope_override(ctx);

  typedef struct bbs_listing {
    uint64_t id;
    char title[SSH_CHATTER_BBS_TITLE_LEN];
    char author[SSH_CHATTER_USERNAME_LEN];
    char tags[SSH_CHATTER_BBS_MAX_TAGS][SSH_CHATTER_BBS_TAG_LEN];
    size_t tag_count;
    time_t created_at;
    time_t bumped_at;
  } bbs_listing_t;

  bbs_listing_t listings[SSH_CHATTER_BBS_MAX_POSTS];
  size_t count = 0U;

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  for (size_t idx = 0U; idx < SSH_CHATTER_BBS_MAX_POSTS; ++idx) {
    const bbs_post_t *post = &host->bbs_posts[idx];
    if (!post->in_use) {
      continue;
    }
    listings[count].id = post->id;
    snprintf(listings[count].title, sizeof(listings[count].title), "%s", post->title);
    snprintf(listings[count].author, sizeof(listings[count].author), "%s", post->author);
    listings[count].tag_count = post->tag_count;
    for (size_t tag_idx = 0U; tag_idx < post->tag_count && tag_idx < SSH_CHATTER_BBS_MAX_TAGS; ++tag_idx) {
      snprintf(listings[count].tags[tag_idx], sizeof(listings[count].tags[tag_idx]), "%s", post->tags[tag_idx]);
    }
    listings[count].created_at = post->created_at;
    listings[count].bumped_at = post->bumped_at;
    ++count;
    if (count >= SSH_CHATTER_BBS_MAX_POSTS) {
      break;
    }
  }
  pthread_mutex_unlock(&host->lock);

  if (count == 0U) {
    session_send_system_line(ctx, "The bulletin board is empty.");
    session_translation_pop_scope_override(ctx, previous_override);
    return;
  }

  for (size_t outer = 1U; outer < count; ++outer) {
    bbs_listing_t key = listings[outer];
    size_t position = outer;
    while (position > 0U && listings[position - 1U].bumped_at < key.bumped_at) {
      listings[position] = listings[position - 1U];
      --position;
    }
    listings[position] = key;
  }

  ctx->bbs_view_active = false;
  ctx->bbs_view_post_id = 0U;

  char section_label[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(section_label, sizeof(section_label), "BBS Topic: %s", working_topic);
  session_render_separator(ctx, section_label);

  bool found = false;
  for (size_t idx = 0U; idx < count; ++idx) {
    const bbs_listing_t *entry = &listings[idx];
    const char *entry_topic = (entry->tag_count > 0U) ? entry->tags[0] : SSH_CHATTER_BBS_DEFAULT_TAG;
    if (strcasecmp(entry_topic, working_topic) != 0) {
      continue;
    }

    char created_buffer[32];
    bbs_format_time(entry->bumped_at, created_buffer, sizeof(created_buffer));

    char line[SSH_CHATTER_MESSAGE_LIMIT];
    int title_preview = (int)strnlen(entry->title, sizeof(entry->title));
    if (title_preview > 80) {
      title_preview = 80;
    }

    if (entry->tag_count <= 1U) {
      snprintf(line, sizeof(line), "#%" PRIu64 " [%s] %.*s", entry->id, created_buffer, title_preview, entry->title);
    } else {
      char tag_buffer[SSH_CHATTER_MESSAGE_LIMIT];
      size_t buffer_offset = 0U;
      tag_buffer[0] = '\0';
      for (size_t tag_idx = 0U; tag_idx < entry->tag_count; ++tag_idx) {
        const char *tag_value = entry->tags[tag_idx];
        if (tag_value[0] == '\0') {
          continue;
        }
        size_t len = strlen(tag_value);
        if (buffer_offset + len + 2U >= sizeof(tag_buffer)) {
          break;
        }
        if (buffer_offset > 0U) {
          tag_buffer[buffer_offset++] = ',';
        }
        memcpy(tag_buffer + buffer_offset, tag_value, len);
        buffer_offset += len;
        tag_buffer[buffer_offset] = '\0';
      }
      int tags_preview = (int)strnlen(tag_buffer, sizeof(tag_buffer));
      if (tags_preview > 80) {
        tags_preview = 80;
      }
      snprintf(line, sizeof(line), "#%" PRIu64 " [%s] %.*s|%.*s", entry->id, created_buffer, title_preview, entry->title,
               tags_preview, tag_buffer);
    }

    session_send_system_line(ctx, line);
    found = true;
  }

  if (!found) {
    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "No posts found for topic '%s'.", working_topic);
    session_send_system_line(ctx, message);
  }

  session_render_separator(ctx, "End");
  session_translation_pop_scope_override(ctx, previous_override);
}

// Display a single post to the user.
static void session_bbs_read(session_ctx_t *ctx, uint64_t id) {
  if (ctx == NULL || ctx->owner == NULL || id == 0U) {
    return;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  bbs_post_t *post = host_find_bbs_post_locked(host, id);
  bbs_post_t snapshot = {0};
  if (post != NULL) {
    snapshot = *post;
  }
  pthread_mutex_unlock(&host->lock);

  if (post == NULL || !snapshot.in_use) {
    session_send_system_line(ctx, "No post exists with that identifier.");
    return;
  }

  session_bbs_render_post(ctx, &snapshot, NULL, true, false);
}

// Create a new post using the provided argument format.
static bool session_bbs_is_admin_only_tag(const char *tag) {
  if (tag == NULL || tag[0] == '\0') {
    return false;
  }

  if (strcasecmp(tag, "manual") == 0 || strcasecmp(tag, "notice") == 0) {
    return true;
  }

  if (strcmp(tag, "설명서") == 0 || strcmp(tag, "공지") == 0) {
    return true;
  }

  return false;
}

static void session_bbs_reset_pending_post(session_ctx_t *ctx) {
  if (ctx == NULL) {
    return;
  }

  ctx->bbs_post_pending = false;
  ctx->editor_mode = SESSION_EDITOR_MODE_NONE;
  ctx->pending_bbs_edit_id = 0U;
  ctx->pending_bbs_title[0] = '\0';
  ctx->pending_bbs_body[0] = '\0';
  ctx->pending_bbs_body_length = 0U;
  ctx->pending_bbs_tag_count = 0U;
  ctx->pending_bbs_line_count = 0U;
  ctx->pending_bbs_cursor_line = 0U;
  ctx->pending_bbs_editing_line = false;
  for (size_t idx = 0U; idx < SSH_CHATTER_BBS_MAX_TAGS; ++idx) {
    ctx->pending_bbs_tags[idx][0] = '\0';
  }
  ctx->bbs_breaking_count = 0U;
  memset(ctx->bbs_breaking_messages, 0, sizeof(ctx->bbs_breaking_messages));
  ctx->bbs_rendering_editor = false;
}

static void session_bbs_commit_pending_post(session_ctx_t *ctx) {
  if (ctx == NULL) {
    return;
  }

  if (!ctx->bbs_post_pending) {
    return;
  }

  if (ctx->editor_mode == SESSION_EDITOR_MODE_ASCIIART) {
    session_asciiart_import_from_editor(ctx);
    if (ctx->asciiart_length == 0U) {
      const char *discard_message =
          (ctx->asciiart_target == SESSION_ASCIIART_TARGET_PROFILE_PICTURE) ? "Profile picture draft discarded."
                                                                            : "ASCII art draft discarded.";
      session_asciiart_cancel(ctx, discard_message);
      session_bbs_reset_pending_post(ctx);
      return;
    }

    session_asciiart_commit(ctx);
    session_bbs_reset_pending_post(ctx);
    return;
  }

  if (ctx->pending_bbs_body_length == 0U) {
    session_send_system_line(ctx, "Post body was empty. Draft discarded.");
    session_bbs_reset_pending_post(ctx);
    return;
  }

  if (session_security_check_text(ctx, "BBS post", ctx->pending_bbs_body, ctx->pending_bbs_body_length, false) !=
      HOST_SECURITY_SCAN_CLEAN) {
    session_bbs_reset_pending_post(ctx);
    return;
  }

  host_t *host = ctx->owner;
  if (host == NULL) {
    session_bbs_reset_pending_post(ctx);
    return;
  }

  pthread_mutex_lock(&host->lock);
  bbs_post_t snapshot = {0};
  if (ctx->editor_mode == SESSION_EDITOR_MODE_BBS_EDIT) {
    uint64_t edit_id = ctx->pending_bbs_edit_id;
    bbs_post_t *post = host_find_bbs_post_locked(host, edit_id);
    if (post == NULL || !post->in_use) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "No post exists with that identifier anymore.");
      session_bbs_reset_pending_post(ctx);
      return;
    }

    bool can_edit = (strncmp(post->author, ctx->user.name, SSH_CHATTER_USERNAME_LEN) == 0) || ctx->user.is_operator ||
                    ctx->user.is_lan_operator;
    if (!can_edit) {
      pthread_mutex_unlock(&host->lock);
      session_send_system_line(ctx, "Only the author or an operator may edit this post.");
      session_bbs_reset_pending_post(ctx);
      return;
    }

    snprintf(post->title, sizeof(post->title), "%s", ctx->pending_bbs_title);
    memcpy(post->body, ctx->pending_bbs_body, ctx->pending_bbs_body_length);
    post->body[ctx->pending_bbs_body_length] = '\0';
    host_strip_column_reset(post->title);
    host_strip_column_reset(post->body);
    post->tag_count = ctx->pending_bbs_tag_count;
    for (size_t idx = 0U; idx < post->tag_count; ++idx) {
      snprintf(post->tags[idx], sizeof(post->tags[idx]), "%s", ctx->pending_bbs_tags[idx]);
      host_strip_column_reset(post->tags[idx]);
    }

    post->bumped_at = time(NULL);
    snapshot = *post;
    host_bbs_state_save_locked(host);
    pthread_mutex_unlock(&host->lock);

    session_bbs_reset_pending_post(ctx);
    session_bbs_render_post(ctx, &snapshot, "Post updated.", false, false);
    return;
  }

  bbs_post_t *post = host_allocate_bbs_post_locked(host);
  if (post == NULL) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "The bulletin board is full right now.");
    return;
  }

  snprintf(post->author, sizeof(post->author), "%s", ctx->user.name);
  snprintf(post->title, sizeof(post->title), "%s", ctx->pending_bbs_title);
  memcpy(post->body, ctx->pending_bbs_body, ctx->pending_bbs_body_length);
  post->body[ctx->pending_bbs_body_length] = '\0';
  host_strip_column_reset(post->author);
  host_strip_column_reset(post->title);
  host_strip_column_reset(post->body);
  post->tag_count = ctx->pending_bbs_tag_count;
  for (size_t idx = 0U; idx < post->tag_count; ++idx) {
    snprintf(post->tags[idx], sizeof(post->tags[idx]), "%s", ctx->pending_bbs_tags[idx]);
    host_strip_column_reset(post->tags[idx]);
  }

  snapshot = *post;
  host_bbs_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  session_bbs_reset_pending_post(ctx);

  session_bbs_render_post(ctx, &snapshot, "Post created.", true, false);
}

static void session_bbs_begin_post(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL) {
    return;
  }

  if (ctx->bbs_post_pending) {
    const char *terminator = session_editor_terminator(ctx);
    char warning[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(warning, sizeof(warning), "You are already composing a post. Finish it with %s.", terminator);
    session_send_system_line(ctx, warning);
    return;
  }

  ctx->bbs_breaking_count = 0U;
  memset(ctx->bbs_breaking_messages, 0, sizeof(ctx->bbs_breaking_messages));
  ctx->bbs_view_active = false;
  ctx->bbs_view_post_id = 0U;

  if (ctx->owner == NULL) {
    session_send_system_line(ctx, "The bulletin board is unavailable right now.");
    return;
  }

  session_bbs_reset_pending_post(ctx);

  if (arguments == NULL) {
    session_bbs_send_usage(ctx, "post", "<title>[|tags...]");
    session_send_system_line(ctx, "Use | to separate tags when the title has spaces.");
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);
  if (working[0] == '\0') {
    session_bbs_send_usage(ctx, "post", "<title>[|tags...]");
    session_send_system_line(ctx, "Use | to separate tags when the title has spaces.");
    return;
  }

  char title[SSH_CHATTER_BBS_TITLE_LEN];
  title[0] = '\0';
  char *tag_cursor = NULL;
  char *separator = strchr(working, '|');
  if (separator != NULL) {
    *separator = '\0';
    char *title_part = working;
    char *tags_part = separator + 1;
    trim_whitespace_inplace(title_part);
    trim_whitespace_inplace(tags_part);
    size_t title_len = strnlen(title_part, sizeof(title));
    if (title_len > 1U && (title_part[0] == '\"' || title_part[0] == '\'') && title_part[title_len - 1U] == title_part[0]) {
      title_part[title_len - 1U] = '\0';
      ++title_part;
      trim_whitespace_inplace(title_part);
    }
    size_t copy_len = strnlen(title_part, sizeof(title) - 1U);
    memcpy(title, title_part, copy_len);
    title[copy_len] = '\0';
    tag_cursor = tags_part;
  } else {
    char *cursor = working;
    if (*cursor == '\"' || *cursor == '\'') {
      char quote = *cursor++;
      char *closing = strchr(cursor, quote);
      if (closing == NULL) {
        session_send_system_line(ctx, "Missing closing quote for the title.");
        return;
      }
      size_t copy_len = (size_t)(closing - cursor);
      if (copy_len >= sizeof(title)) {
        copy_len = sizeof(title) - 1U;
      }
      memcpy(title, cursor, copy_len);
      title[copy_len] = '\0';
      cursor = closing + 1;
    } else {
      char *space = cursor;
      while (*space != '\0' && !isspace((unsigned char)*space)) {
        ++space;
      }
      size_t copy_len = (size_t)(space - cursor);
      if (copy_len >= sizeof(title)) {
        copy_len = sizeof(title) - 1U;
      }
      memcpy(title, cursor, copy_len);
      title[copy_len] = '\0';
      cursor = space;
    }

    trim_whitespace_inplace(cursor);
    tag_cursor = cursor;
  }

  if (title[0] == '\0') {
    session_send_system_line(ctx, "A title is required to create a post.");
    return;
  }

  size_t tag_count = 0U;
  bool discarded_tags = false;
  bool default_tag_applied = false;
  while (tag_cursor != NULL && *tag_cursor != '\0') {
    while (isspace((unsigned char)*tag_cursor)) {
      ++tag_cursor;
    }
    if (*tag_cursor == '\0') {
      break;
    }
    char *end = tag_cursor;
    while (*end != '\0' && !isspace((unsigned char)*end)) {
      ++end;
    }
    size_t length = (size_t)(end - tag_cursor);
    if (length > 0U) {
      if (tag_count < SSH_CHATTER_BBS_MAX_TAGS) {
        if (length >= SSH_CHATTER_BBS_TAG_LEN) {
          length = SSH_CHATTER_BBS_TAG_LEN - 1U;
        }
        char tag_value[SSH_CHATTER_BBS_TAG_LEN];
        memcpy(tag_value, tag_cursor, length);
        tag_value[length] = '\0';
        if (!ctx->user.is_operator && session_bbs_is_admin_only_tag(tag_value)) {
          char warning[SSH_CHATTER_MESSAGE_LIMIT];
          snprintf(warning, sizeof(warning), "The '%s' tag is reserved for administrators.", tag_value);
          session_send_system_line(ctx, warning);
          return;
        }
        snprintf(ctx->pending_bbs_tags[tag_count], sizeof(ctx->pending_bbs_tags[tag_count]), "%s", tag_value);
        ++tag_count;
      } else {
        discarded_tags = true;
      }
    }
    tag_cursor = end;
  }

  if (tag_count == 0U) {
    snprintf(ctx->pending_bbs_tags[0], sizeof(ctx->pending_bbs_tags[0]), "%s", SSH_CHATTER_BBS_DEFAULT_TAG);
    tag_count = 1U;
    default_tag_applied = true;
  }

  snprintf(ctx->pending_bbs_title, sizeof(ctx->pending_bbs_title), "%s", title);
  ctx->pending_bbs_tag_count = tag_count;
  ctx->pending_bbs_body[0] = '\0';
  ctx->pending_bbs_body_length = 0U;
  ctx->bbs_post_pending = true;
  ctx->editor_mode = SESSION_EDITOR_MODE_BBS_CREATE;
  ctx->pending_bbs_edit_id = 0U;

  char notice[SSH_CHATTER_MESSAGE_LIMIT];
  notice[0] = '\0';
  if (default_tag_applied) {
    snprintf(notice, sizeof(notice), "No tags provided; default tag '%s' applied.", SSH_CHATTER_BBS_DEFAULT_TAG);
  }
  if (discarded_tags) {
    if (notice[0] != '\0') {
      strncat(notice, "\n", sizeof(notice) - strlen(notice) - 1U);
    }
    strncat(notice, "Only the first four tags were kept. Extra tags were ignored.",
            sizeof(notice) - strlen(notice) - 1U);
  }

  session_bbs_render_editor(ctx, notice[0] != '\0' ? notice : NULL);
}

static void session_bbs_capture_body_text(session_ctx_t *ctx, const char *text) {
  if (ctx == NULL || !ctx->bbs_post_pending || text == NULL) {
    return;
  }

  session_capture_multiline_text(ctx, text, session_bbs_capture_body_line, session_bbs_capture_continue);
}

static void session_bbs_capture_body_line(session_ctx_t *ctx, const char *line) {
  if (ctx == NULL || !ctx->bbs_post_pending) {
    return;
  }

  char trimmed[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(trimmed, sizeof(trimmed), "%s", line != NULL ? line : "");
  trim_whitespace_inplace(trimmed);
  if (session_editor_matches_terminator(ctx, trimmed)) {
    session_bbs_commit_pending_post(ctx);
    return;
  }

  if (line == NULL) {
    line = "";
  }

  char status[SSH_CHATTER_MESSAGE_LIMIT];
  status[0] = '\0';

  session_bbs_recalculate_line_count(ctx);
  bool editing_line = ctx->pending_bbs_editing_line && ctx->pending_bbs_cursor_line < ctx->pending_bbs_line_count;

  bool updated = false;
  if (editing_line) {
    updated = session_bbs_replace_line(ctx, ctx->pending_bbs_cursor_line, line, status, sizeof(status));
  } else {
    updated = session_bbs_append_line(ctx, line, status, sizeof(status));
  }

  if (!updated && status[0] == '\0') {
    snprintf(status, sizeof(status), "Unable to update the draft right now.");
  }

  session_bbs_render_editor(ctx, status[0] != '\0' ? status : NULL);
}

static void session_bbs_begin_edit(session_ctx_t *ctx, uint64_t id) {
  if (ctx == NULL || id == 0U) {
    session_send_system_line(ctx, "Invalid post identifier.");
    return;
  }

  if (ctx->bbs_post_pending) {
    const char *terminator = session_editor_terminator(ctx);
    char warning[SSH_CHATTER_MESSAGE_LIMIT];
    if (ctx->editor_mode == SESSION_EDITOR_MODE_ASCIIART) {
      snprintf(warning, sizeof(warning), "You are already composing ASCII art. Finish it with %s.", terminator);
    } else {
      snprintf(warning, sizeof(warning), "You are already composing a post. Finish it with %s.", terminator);
    }
    session_send_system_line(ctx, warning);
    return;
  }

  if (ctx->owner == NULL) {
    session_send_system_line(ctx, "The bulletin board is unavailable right now.");
    return;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  bbs_post_t *post = host_find_bbs_post_locked(host, id);
  bbs_post_t snapshot = {0};
  if (post != NULL && post->in_use) {
    snapshot = *post;
  }
  pthread_mutex_unlock(&host->lock);

  if (post == NULL || !snapshot.in_use) {
    session_send_system_line(ctx, "No post exists with that identifier.");
    return;
  }

  bool can_edit = (strncmp(snapshot.author, ctx->user.name, SSH_CHATTER_USERNAME_LEN) == 0) || ctx->user.is_operator ||
                  ctx->user.is_lan_operator;
  if (!can_edit) {
    session_send_system_line(ctx, "Only the author or an operator may edit this post.");
    return;
  }

  session_bbs_reset_pending_post(ctx);
  ctx->bbs_post_pending = true;
  ctx->editor_mode = SESSION_EDITOR_MODE_BBS_EDIT;
  ctx->pending_bbs_edit_id = id;

  snprintf(ctx->pending_bbs_title, sizeof(ctx->pending_bbs_title), "%s", snapshot.title);

  size_t body_len = strnlen(snapshot.body, sizeof(ctx->pending_bbs_body) - 1U);
  memcpy(ctx->pending_bbs_body, snapshot.body, body_len);
  ctx->pending_bbs_body[body_len] = '\0';
  ctx->pending_bbs_body_length = body_len;

  ctx->pending_bbs_tag_count = snapshot.tag_count;
  if (ctx->pending_bbs_tag_count > SSH_CHATTER_BBS_MAX_TAGS) {
    ctx->pending_bbs_tag_count = SSH_CHATTER_BBS_MAX_TAGS;
  }
  for (size_t idx = 0U; idx < ctx->pending_bbs_tag_count; ++idx) {
    snprintf(ctx->pending_bbs_tags[idx], sizeof(ctx->pending_bbs_tags[idx]), "%s", snapshot.tags[idx]);
  }

  char notice[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(notice, sizeof(notice), "Editing post #%" PRIu64 ". Finish with %s to save changes.", id,
           session_bbs_terminator(ctx));
  session_bbs_render_editor(ctx, notice);
}

// Append a comment to a post.
static void session_bbs_add_comment(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL || arguments == NULL) {
    session_bbs_send_usage(ctx, "comment", "<id>|<text>");
    return;
  }

  char working[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(working, sizeof(working), "%s", arguments);
  trim_whitespace_inplace(working);
  if (working[0] == '\0') {
    session_bbs_send_usage(ctx, "comment", "<id>|<text>");
    return;
  }

  char *separator = strchr(working, '|');
  if (separator == NULL) {
    session_bbs_send_usage(ctx, "comment", "<id>|<text>");
    return;
  }
  *separator = '\0';
  char *id_text = working;
  char *comment_text = separator + 1;
  trim_whitespace_inplace(id_text);
  trim_whitespace_inplace(comment_text);

  if (id_text[0] == '\0' || comment_text[0] == '\0') {
    session_bbs_send_usage(ctx, "comment", "<id>|<text>");
    return;
  }

  uint64_t id = (uint64_t)strtoull(id_text, NULL, 10);
  if (id == 0U) {
    session_send_system_line(ctx, "Invalid post identifier.");
    return;
  }

  size_t comment_scan_length = strnlen(comment_text, SSH_CHATTER_BBS_COMMENT_LEN);
  if (session_security_check_text(ctx, "BBS comment", comment_text, comment_scan_length, false) !=
      HOST_SECURITY_SCAN_CLEAN) {
    return;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  bbs_post_t *post = host_find_bbs_post_locked(host, id);
  if (post == NULL || !post->in_use) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "No post exists with that identifier.");
    return;
  }
  if (post->comment_count >= SSH_CHATTER_BBS_MAX_COMMENTS) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "This post has reached the comment limit.");
    return;
  }

  bbs_comment_t *comment = &post->comments[post->comment_count++];
  snprintf(comment->author, sizeof(comment->author), "%s", ctx->user.name);
  size_t comment_len = strnlen(comment_text, SSH_CHATTER_BBS_COMMENT_LEN - 1U);
  memcpy(comment->text, comment_text, comment_len);
  comment->text[comment_len] = '\0';
  host_strip_column_reset(comment->author);
  host_strip_column_reset(comment->text);
  comment->created_at = time(NULL);
  post->bumped_at = comment->created_at;
  bbs_post_t snapshot = *post;
  host_bbs_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  session_bbs_render_post(ctx, &snapshot, "Comment added.", false, true);
}

static void session_bbs_delete(session_ctx_t *ctx, uint64_t id) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  if (id == 0U) {
    session_send_system_line(ctx, "Invalid post identifier.");
    return;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  bbs_post_t *post = host_find_bbs_post_locked(host, id);
  if (post == NULL || !post->in_use) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "No post exists with that identifier.");
    return;
  }

  bool can_delete = (strncmp(post->author, ctx->user.name, SSH_CHATTER_USERNAME_LEN) == 0) || ctx->user.is_operator ||
                    ctx->user.is_lan_operator;
  if (!can_delete) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "Only the author or an operator may delete this post.");
    return;
  }

  host_clear_bbs_post_locked(host, post);
  host_bbs_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  session_send_system_line(ctx, "Post deleted.");
}

// Bump a post to the top of the list by refreshing its activity time.
static void session_bbs_regen_post(session_ctx_t *ctx, uint64_t id) {
  if (ctx == NULL || ctx->owner == NULL || id == 0U) {
    return;
  }

  host_t *host = ctx->owner;
  pthread_mutex_lock(&host->lock);
  bbs_post_t *post = host_find_bbs_post_locked(host, id);
  if (post == NULL || !post->in_use) {
    pthread_mutex_unlock(&host->lock);
    session_send_system_line(ctx, "No post exists with that identifier.");
    return;
  }

  post->bumped_at = time(NULL);
  bbs_post_t snapshot = *post;
  host_bbs_state_save_locked(host);
  pthread_mutex_unlock(&host->lock);

  session_bbs_render_post(ctx, &snapshot, "Post bumped to the top.", false, false);
}

static void session_rss_clear(session_ctx_t *ctx) {
  if (ctx == NULL) {
    return;
  }

  memset(&ctx->rss_view, 0, sizeof(ctx->rss_view));
  ctx->in_rss_mode = false;
}

static void session_rss_exit(session_ctx_t *ctx, const char *reason) {
  if (ctx == NULL) {
    return;
  }

  const bool was_active = ctx->in_rss_mode;
  session_rss_clear(ctx);

  if (reason != NULL && reason[0] != '\0') {
    session_send_system_line(ctx, reason);
  } else if (was_active) {
    session_send_system_line(ctx, "RSS reader closed.");
  }

  if (was_active) {
    session_render_prompt(ctx, false);
  }
}

static void session_rss_show_current(session_ctx_t *ctx) {
  if (ctx == NULL || !ctx->rss_view.active || ctx->rss_view.item_count == 0U) {
    return;
  }

  if (ctx->rss_view.cursor >= ctx->rss_view.item_count) {
    ctx->rss_view.cursor = ctx->rss_view.item_count - 1U;
  }

  const rss_session_item_t *item = &ctx->rss_view.items[ctx->rss_view.cursor];

  char header[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(header, sizeof(header), "Feed %s (%zu/%zu)", ctx->rss_view.tag, ctx->rss_view.cursor + 1U,
           ctx->rss_view.item_count);
  session_render_separator(ctx, header);

  char line[SSH_CHATTER_MESSAGE_LIMIT];
  if (item->title[0] != '\0') {
    snprintf(line, sizeof(line), "Title : %s", item->title);
  } else {
    snprintf(line, sizeof(line), "Title : (untitled)");
  }
  session_send_system_line(ctx, line);

  if (item->link[0] != '\0') {
    snprintf(line, sizeof(line), "Link  : %s", item->link);
  } else {
    snprintf(line, sizeof(line), "Link  : (none)");
  }
  session_send_system_line(ctx, line);

  if (item->summary[0] != '\0') {
    session_send_system_line(ctx, "Summary:");
    char working[SSH_CHATTER_RSS_SUMMARY_LEN];
    snprintf(working, sizeof(working), "%s", item->summary);
    char *saveptr = NULL;
    char *fragment = strtok_r(working, "\r\n", &saveptr);
    while (fragment != NULL) {
      rss_trim_whitespace(fragment);
      if (fragment[0] != '\0') {
        snprintf(line, sizeof(line), "  %s", fragment);
        session_send_system_line(ctx, line);
      }
      fragment = strtok_r(NULL, "\r\n", &saveptr);
    }
  } else {
    session_send_system_line(ctx, "Summary: (none)");
  }
}

static void session_rss_begin(session_ctx_t *ctx, const char *tag, const rss_session_item_t *items, size_t count) {
  if (ctx == NULL || tag == NULL || tag[0] == '\0' || items == NULL || count == 0U) {
    return;
  }

  session_rss_clear(ctx);

  if (count > SSH_CHATTER_RSS_MAX_ITEMS) {
    count = SSH_CHATTER_RSS_MAX_ITEMS;
  }

  ctx->rss_view.active = true;
  ctx->rss_view.item_count = count;
  ctx->rss_view.cursor = 0U;
  snprintf(ctx->rss_view.tag, sizeof(ctx->rss_view.tag), "%s", tag);
  for (size_t idx = 0U; idx < count; ++idx) {
    ctx->rss_view.items[idx] = items[idx];
  }
  ctx->in_rss_mode = true;

  char intro[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(intro, sizeof(intro),
           "Browsing feed '%s'. Use Up/Down arrows to navigate. Type /exit or press Ctrl+Z to return.",
           ctx->rss_view.tag);
  session_render_separator(ctx, "RSS Reader");
  session_send_system_line(ctx, intro);
  session_rss_show_current(ctx);
}

static bool session_rss_move(session_ctx_t *ctx, int delta) {
  if (ctx == NULL || !ctx->rss_view.active || ctx->rss_view.item_count == 0U || delta == 0) {
    return false;
  }

  size_t current = ctx->rss_view.cursor;
  size_t next = current;

  if (delta > 0) {
    if (next + 1U < ctx->rss_view.item_count) {
      next += 1U;
    }
  } else {
    if (next > 0U) {
      next -= 1U;
    }
  }

  if (next == current) {
    return false;
  }

  ctx->rss_view.cursor = next;
  session_rss_show_current(ctx);
  return true;
}

static void session_rss_list(session_ctx_t *ctx) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  rss_feed_t snapshot[SSH_CHATTER_RSS_MAX_FEEDS];
  size_t count = 0U;

  pthread_mutex_lock(&ctx->owner->lock);
  for (size_t idx = 0U; idx < SSH_CHATTER_RSS_MAX_FEEDS; ++idx) {
    if (!ctx->owner->rss_feeds[idx].in_use) {
      continue;
    }
    snapshot[count++] = ctx->owner->rss_feeds[idx];
    if (count >= SSH_CHATTER_RSS_MAX_FEEDS) {
      break;
    }
  }
  pthread_mutex_unlock(&ctx->owner->lock);

  session_render_separator(ctx, "RSS Feeds");
  if (count == 0U) {
    session_send_system_line(ctx,
                             "No RSS feeds registered. Operators can add one with /rss add <url> <tag>.");
    return;
  }

  for (size_t idx = 0U; idx < count; ++idx) {
    const rss_feed_t *entry = &snapshot[idx];
    char line[SSH_CHATTER_MESSAGE_LIMIT];
    if (entry->last_title[0] != '\0') {
      char preview[72];
      snprintf(preview, sizeof(preview), "%.64s", entry->last_title);
      snprintf(line, sizeof(line), "[%s] %s (last: %s)", entry->tag, entry->url, preview);
    } else {
      snprintf(line, sizeof(line), "[%s] %s", entry->tag, entry->url);
    }
    session_send_system_line(ctx, line);
  }
}

static void session_rss_read(session_ctx_t *ctx, const char *tag) {
  if (ctx == NULL || ctx->owner == NULL || tag == NULL || tag[0] == '\0') {
    session_send_system_line(ctx, "Usage: /rss read <tag>");
    return;
  }

  char working[SSH_CHATTER_RSS_TAG_LEN];
  snprintf(working, sizeof(working), "%s", tag);
  rss_trim_whitespace(working);
  if (!rss_tag_is_valid(working)) {
    session_send_system_line(ctx, "Tags may only contain letters, numbers, '-', '_' or '.'.");
    return;
  }

  rss_feed_t feed_snapshot = {0};
  pthread_mutex_lock(&ctx->owner->lock);
  rss_feed_t *entry = host_find_rss_feed_locked(ctx->owner, working);
  if (entry != NULL) {
    feed_snapshot = *entry;
  }
  pthread_mutex_unlock(&ctx->owner->lock);

  if (feed_snapshot.tag[0] == '\0') {
    char message[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(message, sizeof(message), "No RSS feed found for tag '%s'.", working);
    session_send_system_line(ctx, message);
    return;
  }

  rss_session_item_t items[SSH_CHATTER_RSS_MAX_ITEMS];
  size_t item_count = 0U;
  if (!host_rss_fetch_items(&feed_snapshot, items, SSH_CHATTER_RSS_MAX_ITEMS, &item_count)) {
    session_send_system_line(ctx, "Failed to fetch RSS feed. Try again later.");
    return;
  }

  if (item_count == 0U) {
    session_send_system_line(ctx, "The feed does not contain any recent entries.");
    return;
  }

  time_t now = time(NULL);
  pthread_mutex_lock(&ctx->owner->lock);
  entry = host_find_rss_feed_locked(ctx->owner, working);
  if (entry != NULL) {
    entry->last_checked = now;
    snprintf(entry->last_title, sizeof(entry->last_title), "%s", items[0].title);
    snprintf(entry->last_link, sizeof(entry->last_link), "%s", items[0].link);
    host_rss_state_save_locked(ctx->owner);
  }
  pthread_mutex_unlock(&ctx->owner->lock);

  session_rss_begin(ctx, feed_snapshot.tag, items, item_count);
}

static void session_handle_rss(session_ctx_t *ctx, const char *arguments) {
  if (ctx == NULL || ctx->owner == NULL) {
    return;
  }

  static const char *kUsage = "Usage: /rss <add <url> <tag>|del <tag>|read <tag>|list>";

  char usage[SSH_CHATTER_MESSAGE_LIMIT];
  session_command_format_usage(ctx, "/rss", kUsage, usage, sizeof(usage));

  char working[SSH_CHATTER_MAX_INPUT_LEN];
  if (arguments == NULL) {
    working[0] = '\0';
  } else {
    snprintf(working, sizeof(working), "%s", arguments);
  }
  rss_trim_whitespace(working);

  if (working[0] == '\0') {
    session_send_system_line(ctx, usage);
    return;
  }

  char *saveptr = NULL;
  char *command = strtok_r(working, " \t", &saveptr);
  if (command == NULL) {
    session_send_system_line(ctx, usage);
    return;
  }

  if (strcasecmp(command, "list") == 0) {
    session_rss_list(ctx);
    return;
  }

  if (strcasecmp(command, "add") == 0 || strcasecmp(command, "추가") == 0) {
    if (!ctx->user.is_operator) {
      session_send_system_line(ctx, "Only operators may add RSS feeds.");
      return;
    }

    char *url = strtok_r(NULL, " \t", &saveptr);
    char *tag = strtok_r(NULL, " \t", &saveptr);
    if (url == NULL || tag == NULL) {
      session_send_system_line(ctx, "Usage: /rss add <url> <tag>");
      return;
    }

    rss_trim_whitespace(url);
    rss_trim_whitespace(tag);
    if (url[0] == '\0' || tag[0] == '\0') {
      session_send_system_line(ctx, "Usage: /rss add <url> <tag>");
      return;
    }

    char error[128];
    if (host_rss_add_feed(ctx->owner, url, tag, error, sizeof(error))) {
      char message[SSH_CHATTER_MESSAGE_LIMIT];
      snprintf(message, sizeof(message), "RSS feed '%s' registered as '%s'.", url, tag);
      session_send_system_line(ctx, message);
      host_rss_start_backend(ctx->owner);
    } else {
      if (error[0] == '\0') {
        snprintf(error, sizeof(error), "Failed to add RSS feed.");
      }
      session_send_system_line(ctx, error);
    }
    return;
  }

  if (strcasecmp(command, "del") == 0 || strcasecmp(command, "삭제") == 0) {
    if (!ctx->user.is_operator) {
      session_send_system_line(ctx, "Only operators may delete RSS feeds.");
      return;
    }

    char *tag = strtok_r(NULL, " \t", &saveptr);
    if (tag == NULL) {
      session_send_system_line(ctx, "Usage: /rss del <tag>");
      return;
    }

    rss_trim_whitespace(tag);
    if (tag[0] == '\0') {
      session_send_system_line(ctx, "Usage: /rss del <tag>");
      return;
    }

    char error[128];
    if (host_rss_remove_feed(ctx->owner, tag, error, sizeof(error))) {
      char message[SSH_CHATTER_MESSAGE_LIMIT];
      snprintf(message, sizeof(message), "RSS feed '%s' deleted.", tag);
      session_send_system_line(ctx, message);
    } else {
      if (error[0] == '\0') {
        snprintf(error, sizeof(error), "Failed to delete RSS feed.");
      }
      session_send_system_line(ctx, error);
    }
    return;
  }

  if (strcasecmp(command, "read") == 0) {
    char *tag = strtok_r(NULL, " \t", &saveptr);
    if (tag == NULL) {
      session_send_system_line(ctx, "Usage: /rss read <tag>");
      return;
    }
    session_rss_read(ctx, tag);
    return;
  }

  session_send_system_line(ctx, usage);
}

static bool host_asciiart_cooldown_active(host_t *host, const char *ip, const struct timespec *now,
                                          long *remaining_seconds) {
  if (host == NULL || ip == NULL || ip[0] == '\0') {
    if (remaining_seconds != NULL) {
      *remaining_seconds = 0L;
    }
    return false;
  }

  struct timespec current = {0, 0};
  if (now != NULL) {
    current = *now;
  } else if (clock_gettime(CLOCK_MONOTONIC, &current) != 0) {
    current.tv_sec = time(NULL);
    current.tv_nsec = 0L;
  }

  bool active = false;
  long remaining = 0L;

  pthread_mutex_lock(&host->lock);
  join_activity_entry_t *entry = host_find_join_activity_locked(host, ip);
  if (entry != NULL && entry->asciiart_has_cooldown) {
    struct timespec expiry = entry->last_asciiart_post;
    expiry.tv_sec += SSH_CHATTER_ASCIIART_COOLDOWN_SECONDS;
    if (timespec_compare(&current, &expiry) >= 0) {
      entry->asciiart_has_cooldown = false;
    } else {
      active = true;
      struct timespec diff = timespec_diff(&expiry, &current);
      remaining = diff.tv_sec;
      if (diff.tv_nsec > 0L) {
        ++remaining;
      }
      if (remaining < 0L) {
        remaining = 0L;
      }
    }
  }
  pthread_mutex_unlock(&host->lock);

  if (remaining_seconds != NULL) {
    *remaining_seconds = active ? remaining : 0L;
  }

  return active;
}

static void host_asciiart_register_post(host_t *host, const char *ip, const struct timespec *when) {
  if (host == NULL || ip == NULL || ip[0] == '\0' || when == NULL) {
    return;
  }

  pthread_mutex_lock(&host->lock);
  join_activity_entry_t *entry = host_ensure_join_activity_locked(host, ip);
  if (entry != NULL) {
    entry->last_asciiart_post = *when;
    entry->asciiart_has_cooldown = true;
  }
  pthread_mutex_unlock(&host->lock);
}

static void session_asciiart_reset(session_ctx_t *ctx) {
  if (ctx == NULL) {
    return;
  }

  ctx->asciiart_pending = false;
  ctx->asciiart_target = SESSION_ASCIIART_TARGET_NONE;
  ctx->asciiart_buffer[0] = '\0';
  ctx->asciiart_length = 0U;
  ctx->asciiart_line_count = 0U;
}

static bool session_asciiart_cooldown_active(session_ctx_t *ctx, struct timespec *now, long *remaining_seconds) {
  if (ctx == NULL) {
    return false;
  }

  struct timespec current;
  if (clock_gettime(CLOCK_MONOTONIC, &current) != 0) {
    current.tv_sec = time(NULL);
    current.tv_nsec = 0L;
  }

  if (now != NULL) {
    *now = current;
  }

  long session_remaining = 0L;
  bool session_active = false;
  if (ctx->asciiart_has_cooldown) {
    struct timespec expiry = ctx->last_asciiart_post;
    expiry.tv_sec += SSH_CHATTER_ASCIIART_COOLDOWN_SECONDS;
    if (timespec_compare(&current, &expiry) >= 0) {
      ctx->asciiart_has_cooldown = false;
    } else {
      session_active = true;
      struct timespec diff = timespec_diff(&expiry, &current);
      session_remaining = diff.tv_sec;
      if (diff.tv_nsec > 0L) {
        ++session_remaining;
      }
      if (session_remaining < 0L) {
        session_remaining = 0L;
      }
    }
  }

  long ip_remaining = 0L;
  bool ip_active = host_asciiart_cooldown_active(ctx->owner, ctx->client_ip, &current, &ip_remaining);

  if (!session_active && !ip_active) {
    if (remaining_seconds != NULL) {
      *remaining_seconds = 0L;
    }
    return false;
  }

  long max_remaining = session_active ? session_remaining : 0L;
  if (ip_active && ip_remaining > max_remaining) {
    max_remaining = ip_remaining;
  }

  if (remaining_seconds != NULL) {
    *remaining_seconds = max_remaining;
  }

  return true;
}

static void session_asciiart_begin(session_ctx_t *ctx, session_asciiart_target_t target) {
  if (ctx == NULL || target == SESSION_ASCIIART_TARGET_NONE) {
    return;
  }

  if (ctx->bbs_post_pending) {
    if (ctx->editor_mode == SESSION_EDITOR_MODE_ASCIIART) {
      const char *terminator = session_editor_terminator(ctx);
      char notice[SSH_CHATTER_MESSAGE_LIMIT];
      snprintf(notice, sizeof(notice), "You are already composing ASCII art. Finish it with %s.", terminator);
      session_send_system_line(ctx, notice);
    } else {
      session_send_system_line(ctx, "Finish your BBS draft before starting ASCII art.");
    }
    return;
  }

  if (ctx->asciiart_pending) {
    const char *terminator = session_asciiart_terminator(ctx);
    char notice[SSH_CHATTER_MESSAGE_LIMIT];
    snprintf(notice, sizeof(notice), "You are already composing ASCII art. Finish it with %s.", terminator);
    session_send_system_line(ctx, notice);
    return;
  }

  if (target == SESSION_ASCIIART_TARGET_CHAT) {
    struct timespec now;
    long remaining = 0L;
    if (session_asciiart_cooldown_active(ctx, &now, &remaining)) {
      if (remaining < 1L) {
        remaining = 1L;
      }
      char message[SSH_CHATTER_MESSAGE_LIMIT];
      snprintf(message, sizeof(message), "You can share another ASCII art in %ld second%s.", remaining,
               remaining == 1L ? "" : "s");
      session_send_system_line(ctx, message);
      return;
    }
  } else if (target == SESSION_ASCIIART_TARGET_PROFILE_PICTURE) {
    if (!session_user_data_available(ctx) || !session_user_data_load(ctx)) {
      session_send_system_line(ctx, "Profile storage is unavailable.");
      return;
    }
  }

  session_asciiart_reset(ctx);
  ctx->asciiart_pending = true;
  ctx->asciiart_target = target;

  session_bbs_reset_pending_post(ctx);
  ctx->editor_mode = SESSION_EDITOR_MODE_ASCIIART;
  ctx->bbs_post_pending = true;

  size_t ascii_bytes = (size_t)SSH_CHATTER_ASCIIART_BUFFER_LEN;
  char status[SSH_CHATTER_MESSAGE_LIMIT];
  if (target == SESSION_ASCIIART_TARGET_CHAT) {
    snprintf(status, sizeof(status),
             "ASCII art composer ready (max %u lines, up to %zu bytes, 10-minute cooldown per IP).",
             SSH_CHATTER_ASCIIART_MAX_LINES, ascii_bytes);
  } else {
    snprintf(status, sizeof(status),
             "Profile picture composer ready (max %u lines, up to %zu bytes, stored privately).",
             SSH_CHATTER_ASCIIART_MAX_LINES, ascii_bytes);
  }

  session_bbs_render_editor(ctx, status);
}

static void session_asciiart_import_from_editor(session_ctx_t *ctx) {
  if (ctx == NULL) {
    return;
  }

  session_bbs_recalculate_line_count(ctx);

  size_t copy_len = ctx->pending_bbs_body_length;
  if (copy_len >= sizeof(ctx->asciiart_buffer)) {
    copy_len = sizeof(ctx->asciiart_buffer) - 1U;
  }

  if (copy_len > 0U) {
    memcpy(ctx->asciiart_buffer, ctx->pending_bbs_body, copy_len);
  }
  ctx->asciiart_buffer[copy_len] = '\0';
  ctx->asciiart_length = copy_len;
  ctx->asciiart_line_count = ctx->pending_bbs_line_count;
  if (ctx->asciiart_line_count > SSH_CHATTER_ASCIIART_MAX_LINES) {
    ctx->asciiart_line_count = SSH_CHATTER_ASCIIART_MAX_LINES;
  }
}

static void session_asciiart_commit(session_ctx_t *ctx) {
  if (ctx == NULL || !ctx->asciiart_pending) {
    return;
  }

  const session_asciiart_target_t target = ctx->asciiart_target;

  if (ctx->asciiart_length == 0U) {
    const char *discard_message =
        (target == SESSION_ASCIIART_TARGET_PROFILE_PICTURE) ? "Profile picture draft discarded."
                                                            : "ASCII art draft discarded.";
    session_asciiart_cancel(ctx, discard_message);
    return;
  }

  if (ctx->owner == NULL) {
    session_asciiart_reset(ctx);
    return;
  }

  const char *security_label =
      target == SESSION_ASCIIART_TARGET_PROFILE_PICTURE ? "Profile picture" : "ASCII art";
  if (session_security_check_text(ctx, security_label, ctx->asciiart_buffer, ctx->asciiart_length, false) !=
      HOST_SECURITY_SCAN_CLEAN) {
    session_asciiart_reset(ctx);
    return;
  }

  if (target == SESSION_ASCIIART_TARGET_PROFILE_PICTURE) {
    if (!session_user_data_available(ctx) || !session_user_data_load(ctx)) {
      session_send_system_line(ctx, "Profile storage is unavailable.");
      session_asciiart_reset(ctx);
      return;
    }

    if ((size_t)ctx->asciiart_length >= USER_DATA_PROFILE_PICTURE_LEN) {
      session_send_system_line(ctx, "Profile picture exceeds the storage limit.");
      session_asciiart_reset(ctx);
      return;
    }

    char normalized[USER_DATA_PROFILE_PICTURE_LEN];
    session_profile_picture_normalize(ctx->asciiart_buffer, normalized, sizeof(normalized));
    if (normalized[0] == '\0') {
      session_send_system_line(ctx, "Profile picture cannot be empty.");
      session_asciiart_reset(ctx);
      return;
    }

    snprintf(ctx->user_data.profile_picture, sizeof(ctx->user_data.profile_picture), "%s", normalized);
    if (session_user_data_commit(ctx)) {
      session_send_system_line(ctx, "Profile picture updated.");
    } else {
      session_send_system_line(ctx, "Failed to save profile picture.");
    }

    session_asciiart_reset(ctx);
    return;
  }

  struct timespec now;
  if (clock_gettime(CLOCK_MONOTONIC, &now) != 0) {
    now.tv_sec = time(NULL);
    now.tv_nsec = 0L;
  }

  ctx->last_asciiart_post = now;
  ctx->asciiart_has_cooldown = true;
  host_asciiart_register_post(ctx->owner, ctx->client_ip, &now);

  chat_history_entry_t entry = {0};
  if (!host_history_record_user(ctx->owner, ctx, ctx->asciiart_buffer, &entry)) {
    session_asciiart_reset(ctx);
    return;
  }

  session_send_history_entry(ctx, &entry);
  chat_room_broadcast_entry(&ctx->owner->room, &entry, ctx);
  host_notify_external_clients(ctx->owner, &entry);

  ctx->last_message_time = now;
  ctx->has_last_message_time = true;

  session_asciiart_reset(ctx);
}

static void session_asciiart_cancel(session_ctx_t *ctx, const char *reason) {
  if (ctx == NULL || !ctx->asciiart_pending) {
    return;
  }

  const bool used_editor = ctx->editor_mode == SESSION_EDITOR_MODE_ASCIIART;
  session_asciiart_reset(ctx);
  if (used_editor) {
    session_bbs_reset_pending_post(ctx);
  }
  if (reason != NULL && reason[0] != '\0') {
    session_send_system_line(ctx, reason);
  }
}

static bool session_asciiart_capture_continue(const session_ctx_t *ctx) {
  return ctx != NULL && ctx->asciiart_pending;
}

static bool session_bbs_capture_continue(const session_ctx_t *ctx) {
  return ctx != NULL && ctx->bbs_post_pending;
}

static void session_capture_multiline_text(session_ctx_t *ctx, const char *text, session_text_line_consumer_t consumer,
                                           session_text_continue_predicate_t should_continue) {
  if (ctx == NULL || text == NULL || consumer == NULL || should_continue == NULL) {
    return;
  }

  char line[SSH_CHATTER_MAX_INPUT_LEN];
  size_t line_length = 0U;
  bool emitted = false;

  const char *cursor = text;
  while (*cursor != '\0') {
    char ch = *cursor++;
    if (ch == '\\') {
      char next = *cursor;
      if (next == 'r') {
        ++cursor;
        if (*cursor == '\\' && cursor[1] == 'n') {
          cursor += 2;
        }
        line[line_length] = '\0';
        consumer(ctx, line);
        emitted = true;
        line_length = 0U;
        if (!should_continue(ctx)) {
          return;
        }
        continue;
      }
      if (next == 'n') {
        ++cursor;
        line[line_length] = '\0';
        consumer(ctx, line);
        emitted = true;
        line_length = 0U;
        if (!should_continue(ctx)) {
          return;
        }
        continue;
      }
      if (next == '\\') {
        ++cursor;
        ch = '\\';
      }
    }

    if (ch == '\r') {
      if (*cursor == '\n') {
        ++cursor;
      }
      line[line_length] = '\0';
      consumer(ctx, line);
      emitted = true;
      line_length = 0U;
      if (!should_continue(ctx)) {
        return;
      }
      continue;
    }

    if (ch == '\n') {
      line[line_length] = '\0';
      consumer(ctx, line);
      emitted = true;
      line_length = 0U;
      if (!should_continue(ctx)) {
        return;
      }
      continue;
    }

    if (line_length + 1U < sizeof(line)) {
      line[line_length++] = ch;
    }
  }

  if (line_length > 0U || !emitted) {
    line[line_length] = '\0';
    consumer(ctx, line);
  }
}

static void session_asciiart_capture_text(session_ctx_t *ctx, const char *text) {
  if (ctx == NULL || !ctx->asciiart_pending || text == NULL) {
    return;
  }

  session_capture_multiline_text(ctx, text, session_asciiart_capture_line, session_asciiart_capture_continue);
}

static void session_asciiart_capture_line(session_ctx_t *ctx, const char *line) {
  if (ctx == NULL || !ctx->asciiart_pending) {
    return;
  }

  char trimmed[SSH_CHATTER_MESSAGE_LIMIT];
  snprintf(trimmed, sizeof(trimmed), "%s", line != NULL ? line : "");
  trim_whitespace_inplace(trimmed);
  if (session_asciiart_matches_terminator(trimmed)) {
    session_asciiart_commit(ctx);
    return;
  }

  if (ctx->asciiart_line_count >= SSH_CHATTER_ASCIIART_MAX_LINES) {
    session_send_system_line(ctx, "ASCII art line limit reached. Use the terminator to finish.");
    return;
  }

  if (line == NULL) {
    line = "";
  }

  const bool profile_target = ctx->asciiart_target == SESSION_ASCIIART_TARGET_PROFILE_PICTURE;
  const char *full_message =
      profile_target ? "Profile picture buffer is full. Additional text ignored."
                      : "ASCII art buffer is full. Additional text ignored.";
  const char *truncate_message =
      profile_target ? "Line truncated to fit within the profile picture size limit."
                     : "Line truncated to fit within the ASCII art size limit.";

  size_t buffer_capacity = sizeof(ctx->asciiart_buffer);
  if (profile_target && buffer_capacity > USER_DATA_PROFILE_PICTURE_LEN) {
    buffer_capacity = USER_DATA_PROFILE_PICTURE_LEN;
  }

  if (ctx->asciiart_length >= buffer_capacity - 1U) {
    session_send_system_line(ctx, full_message);
    return;
  }

  size_t available = buffer_capacity - ctx->asciiart_length - 1U;
  const size_t newline_cost = ctx->asciiart_length > 0U ? 1U : 0U;
  if (available < newline_cost) {
    session_send_system_line(ctx, full_message);
    return;
  }

  size_t line_length = strlen(line);
  size_t max_line_length = (available > newline_cost) ? (available - newline_cost) : 0U;
  if (line_length > max_line_length) {
    line_length = max_line_length;
    session_send_system_line(ctx, truncate_message);
  }

  if (ctx->asciiart_length > 0U) {
    ctx->asciiart_buffer[ctx->asciiart_length++] = '\n';
  }

  if (line_length > 0U) {
    memcpy(ctx->asciiart_buffer + ctx->asciiart_length, line, line_length);
    ctx->asciiart_length += line_length;
  }

  ctx->asciiart_buffer[ctx->asciiart_length] = '\0';
  ctx->asciiart_line_count += 1U;
}
